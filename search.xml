<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Butterfly 一些魔改美化</title>
    <url>/2023/09/15/Butterfly-%E4%B8%80%E4%BA%9B%E9%AD%94%E6%94%B9%E7%BE%8E%E5%8C%96/</url>
    <content><![CDATA[<div class="note orange icon-padding modern"><i class="note-icon fas fa-bullhorn"></i><p>简单记录一下我Butterfly主题的美化和魔改</p>
</div>
<h3 id="站点动态-title">站点动态 title</h3>
<p>站点动态 title 是通过 js 监测是否聚焦于当前页面，从而替换标签显示内容。</p>
<details class="toggle" ><summary class="toggle-button" style="">查看步骤</summary><div class="toggle-content"><p>①在 [Blogroot]\themes\butterfly\source\js\ 目录下新建 title.js:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//动态标题</span></span><br><span class="line"><span class="keyword">var</span> <span class="title class_">OriginTitile</span> = <span class="variable language_">document</span>.<span class="property">title</span>;</span><br><span class="line"><span class="keyword">var</span> titleTime;</span><br><span class="line"><span class="variable language_">document</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;visibilitychange&#x27;</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable language_">document</span>.<span class="property">hidden</span>) &#123;</span><br><span class="line">        <span class="comment">//离开当前页面时标签显示内容</span></span><br><span class="line">        <span class="variable language_">document</span>.<span class="property">title</span> = <span class="string">&#x27;w(ﾟДﾟ)w 不要走！再看看嘛！&#x27;</span>;</span><br><span class="line">        <span class="built_in">clearTimeout</span>(titleTime);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">//返回当前页面时标签显示内容</span></span><br><span class="line">        <span class="variable language_">document</span>.<span class="property">title</span> = <span class="string">&#x27;♪(^∇^*)欢迎回来！&#x27;</span> + <span class="title class_">OriginTitile</span>;</span><br><span class="line">        <span class="comment">//两秒后变回正常标题</span></span><br><span class="line">        titleTime = <span class="built_in">setTimeout</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">            <span class="variable language_">document</span>.<span class="property">title</span> = <span class="title class_">OriginTitile</span>;</span><br><span class="line">        &#125;, <span class="number">2000</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>②在 [Blogroot]_config.butterfly.yml 的 inject 配置项添加引入，此处因为这是个独立的 js，而且体量极小，所以可以添加 async 异步加载标签：</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">inject:</span><br><span class="line">head:</span><br><span class="line">  # - &lt;link rel=&quot;stylesheet&quot; href=&quot;/xxx.css&quot;&gt;</span><br><span class="line">bottom:</span><br><span class="line">  # - &lt;script src=&quot;xxxx&quot;&gt;&lt;/script&gt;</span><br><span class="line">  - &lt;script async src=&quot;/js/title.js&quot;&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure>
</div></details>
<h3 id="修改标题样式">修改标题样式</h3>
<details class="toggle" ><summary class="toggle-button" style="">效果预览</summary><div class="toggle-content"><p>1111</p>
</div></details>
<details class="toggle" ><summary class="toggle-button" style="">查看步骤</summary><div class="toggle-content"><p>在 Blog/themes/butterfly/source/css 文件下新建 css 文件，并命名为 custom.css (命名按照自己喜好去命名，只需在主题配置文件_config.butterfly.yml 中引入对应的 css 文件即可)，将以下代码复制到新建的 custom.css 中。</p>
<p>如果想自行修改标题样式的话，将 content: ‘\f0c1’; 中的内容换成自己想要的即可，如要添加动画，参考 animation: avatar_turn_around 1s linear infinite;。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-id">#article-container</span> <span class="selector-tag">h1</span><span class="selector-pseudo">:before</span>,</span><br><span class="line"><span class="selector-id">#article-container</span> <span class="selector-tag">h2</span><span class="selector-pseudo">:before</span>,</span><br><span class="line"><span class="selector-id">#article-container</span> <span class="selector-tag">h3</span><span class="selector-pseudo">:before</span>,</span><br><span class="line"><span class="selector-id">#article-container</span> <span class="selector-tag">h4</span><span class="selector-pseudo">:before</span>,</span><br><span class="line"><span class="selector-id">#article-container</span> <span class="selector-tag">h5</span><span class="selector-pseudo">:before</span>,</span><br><span class="line"><span class="selector-id">#article-container</span> <span class="selector-tag">h6</span><span class="selector-pseudo">:before</span>,</span><br><span class="line"><span class="selector-id">#post</span> <span class="selector-class">.post-outdate-notice</span><span class="selector-pseudo">:before</span>,</span><br><span class="line"><span class="selector-class">.fontawesomeIcon</span>,</span><br><span class="line"><span class="selector-class">.note</span><span class="selector-pseudo">:not</span>(<span class="selector-class">.no-icon</span>)<span class="selector-pseudo">::before</span>,</span><br><span class="line">hr<span class="selector-pseudo">:before</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: inline-block;</span><br><span class="line">    <span class="attribute">font-weight</span>: <span class="number">600</span>;</span><br><span class="line">    <span class="attribute">font-style</span>: normal;</span><br><span class="line">    <span class="attribute">font-variant</span>: normal;</span><br><span class="line">    <span class="attribute">font-family</span>: <span class="string">&#x27;Font Awesome 5 Free&#x27;</span>;</span><br><span class="line">    <span class="attribute">text-rendering</span>: auto;</span><br><span class="line">    -webkit-<span class="attribute">font-smoothing</span>: antialiased</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-id">#article-container</span> <span class="selector-tag">h1</span><span class="selector-pseudo">:before</span>,</span><br><span class="line"><span class="selector-id">#article-container</span> <span class="selector-tag">h2</span><span class="selector-pseudo">:before</span>,</span><br><span class="line"><span class="selector-id">#article-container</span> <span class="selector-tag">h3</span><span class="selector-pseudo">:before</span>,</span><br><span class="line"><span class="selector-id">#article-container</span> <span class="selector-tag">h4</span><span class="selector-pseudo">:before</span>,</span><br><span class="line"><span class="selector-id">#article-container</span> <span class="selector-tag">h5</span><span class="selector-pseudo">:before</span>,</span><br><span class="line"><span class="selector-id">#article-container</span> <span class="selector-tag">h6</span><span class="selector-pseudo">:before</span> &#123;</span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#f47466</span>;</span><br><span class="line">    <span class="comment">/* 回形针 */</span></span><br><span class="line">    <span class="attribute">content</span>: <span class="string">&#x27;\f0c1&#x27;</span>;  <span class="comment">/* 若要使用风车效果，请注释这一行 */</span></span><br><span class="line">    <span class="attribute">line-height</span>: <span class="number">1</span>;</span><br><span class="line">    -webkit-<span class="attribute">transition</span>: all .<span class="number">2s</span> ease-out;</span><br><span class="line">    -moz-<span class="attribute">transition</span>: all .<span class="number">2s</span> ease-out;</span><br><span class="line">    -o-<span class="attribute">transition</span>: all .<span class="number">2s</span> ease-out;</span><br><span class="line">    -ms-<span class="attribute">transition</span>: all .<span class="number">2s</span> ease-out;</span><br><span class="line">    <span class="attribute">transition</span>: all .<span class="number">2s</span> ease-out;</span><br><span class="line">    <span class="comment">/* 若要使用风车效果，请去掉下面的注释 */</span></span><br><span class="line">    <span class="comment">/* content: &#x27;\f863&#x27;; </span></span><br><span class="line"><span class="comment">    animation: avatar_turn_around 1s linear infinite; */</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-id">#article-container</span> <span class="selector-tag">h1</span> &#123;</span><br><span class="line">    <span class="attribute">padding-left</span>: <span class="number">1.4rem</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-id">#article-container</span> <span class="selector-tag">h1</span> <span class="selector-tag">code</span> &#123;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">1rem</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-id">#article-container</span> <span class="selector-tag">h1</span><span class="selector-pseudo">:before</span> &#123;</span><br><span class="line">    <span class="attribute">margin-left</span>: -<span class="number">1.3rem</span>;</span><br><span class="line">    <span class="attribute">top</span>: <span class="built_in">calc</span>(<span class="number">50%</span> - .<span class="number">5rem</span>);</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">1rem</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-id">#article-container</span> <span class="selector-tag">h1</span><span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">    <span class="attribute">padding-left</span>: <span class="number">1.6rem</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-id">#article-container</span> <span class="selector-tag">h2</span> &#123;</span><br><span class="line">    <span class="attribute">padding-left</span>: <span class="number">1.3rem</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-id">#article-container</span> <span class="selector-tag">h2</span> <span class="selector-tag">code</span> &#123;</span><br><span class="line">    <span class="attribute">font-size</span>: .<span class="number">9rem</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-id">#article-container</span> <span class="selector-tag">h2</span><span class="selector-pseudo">:before</span> &#123;</span><br><span class="line">    <span class="attribute">margin-left</span>: -<span class="number">1.4rem</span>;</span><br><span class="line">    <span class="attribute">top</span>: <span class="built_in">calc</span>(<span class="number">50%</span> - .<span class="number">45rem</span>);</span><br><span class="line">    <span class="attribute">font-size</span>: .<span class="number">9rem</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-id">#article-container</span> <span class="selector-tag">h2</span><span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">    <span class="attribute">padding-left</span>: <span class="number">1.5rem</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-id">#article-container</span> <span class="selector-tag">h3</span> &#123;</span><br><span class="line">    <span class="attribute">padding-left</span>: <span class="number">1.2rem</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-id">#article-container</span> <span class="selector-tag">h3</span> <span class="selector-tag">code</span> &#123;</span><br><span class="line">    <span class="attribute">font-size</span>: .<span class="number">8rem</span>;</span><br><span class="line">    <span class="attribute">top</span>: <span class="built_in">calc</span>(<span class="number">50%</span> - .<span class="number">4rem</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-id">#article-container</span> <span class="selector-tag">h3</span><span class="selector-pseudo">:before</span> &#123;</span><br><span class="line">    <span class="attribute">margin-left</span>: -<span class="number">1.2rem</span>;</span><br><span class="line">    <span class="attribute">top</span>: <span class="built_in">calc</span>(<span class="number">50%</span> - .<span class="number">4rem</span>);</span><br><span class="line">    <span class="attribute">font-size</span>: .<span class="number">8rem</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-id">#article-container</span> <span class="selector-tag">h3</span><span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">    <span class="attribute">padding-left</span>: <span class="number">1.4rem</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-id">#article-container</span> <span class="selector-tag">h4</span> &#123;</span><br><span class="line">    <span class="attribute">padding-left</span>: <span class="number">1.1rem</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-id">#article-container</span> <span class="selector-tag">h4</span> <span class="selector-tag">code</span> &#123;</span><br><span class="line">    <span class="attribute">font-size</span>: .<span class="number">7rem</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-id">#article-container</span> <span class="selector-tag">h4</span><span class="selector-pseudo">:before</span> &#123;</span><br><span class="line">    <span class="attribute">margin-left</span>: -<span class="number">1rem</span>;</span><br><span class="line">    <span class="attribute">top</span>: <span class="built_in">calc</span>(<span class="number">50%</span> - .<span class="number">35rem</span>);</span><br><span class="line">    <span class="attribute">font-size</span>: .<span class="number">7rem</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-id">#article-container</span> <span class="selector-tag">h4</span><span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">    <span class="attribute">padding-left</span>: <span class="number">1.3rem</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-id">#article-container</span> <span class="selector-tag">h5</span> &#123;</span><br><span class="line">    <span class="attribute">padding-left</span>: <span class="number">1rem</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-id">#article-container</span> <span class="selector-tag">h5</span> <span class="selector-tag">code</span> &#123;</span><br><span class="line">    <span class="attribute">font-size</span>: .<span class="number">6rem</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-id">#article-container</span> <span class="selector-tag">h5</span><span class="selector-pseudo">:before</span> &#123;</span><br><span class="line">    <span class="attribute">margin-left</span>: -.<span class="number">8rem</span>;</span><br><span class="line">    <span class="attribute">top</span>: <span class="built_in">calc</span>(<span class="number">50%</span> - .<span class="number">3rem</span>);</span><br><span class="line">    <span class="attribute">font-size</span>: .<span class="number">6rem</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-id">#article-container</span> <span class="selector-tag">h5</span><span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">    <span class="attribute">padding-left</span>: <span class="number">1.2rem</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-id">#article-container</span> <span class="selector-tag">h6</span> &#123;</span><br><span class="line">    <span class="attribute">padding-left</span>: <span class="number">1rem</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-id">#article-container</span> <span class="selector-tag">h6</span> <span class="selector-tag">code</span> &#123;</span><br><span class="line">    <span class="attribute">font-size</span>: .<span class="number">6rem</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-id">#article-container</span> <span class="selector-tag">h6</span><span class="selector-pseudo">:before</span> &#123;</span><br><span class="line">    <span class="attribute">margin-left</span>: -.<span class="number">8rem</span>;</span><br><span class="line">    <span class="attribute">top</span>: <span class="built_in">calc</span>(<span class="number">50%</span> - .<span class="number">3rem</span>);</span><br><span class="line">    <span class="attribute">font-size</span>: .<span class="number">6rem</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-id">#article-container</span> <span class="selector-tag">h6</span><span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">    <span class="attribute">padding-left</span>: <span class="number">1.2rem</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</div></details>
<h3 id="添加卡通人物（加强版看板娘）">添加卡通人物（加强版看板娘）</h3>
<details class="toggle" ><summary class="toggle-button" style="">效果预览</summary><div class="toggle-content"><p>111</p>
</div></details>
<details class="toggle" ><summary class="toggle-button" style="">查看步骤</summary><div class="toggle-content"><div class="note info simple"><p>参考教程：<a href="https://blog.csdn.net/csdn__cpp/article/details/110007453">在butterfly主题下如何配置加强版看板娘？<em>kali</em>._的博客-CSDN博客</a></p>
<p>相关链接 ：①张书樵大神魔改后的项目：<a href="https://github.com/stevenjoezhang/live2d-widget">GitHub - stevenjoezhang/live2d-widget: 把萌萌哒的看板娘抱回家 (ノ≧∇≦)ノ | Live2D widget for web platform</a></p>
<p>​					②可自建后端 API<a href="https://github.com/fghrsh/live2d_api">GitHub - fghrsh/live2d_api: Live2D 看板娘插件 (https://www.fghrsh.net/post/123.html) 上使用的后端 API</a></p>
<p>​</p>
</div>
<p><strong>①下载</strong></p>
<p><strong>如果已经安装过官方提供的live2d，需要先卸载！</strong></p>
<p><code>npm uninstall hexo-helper-live2d</code></p>
<p>然后下载经过张书樵大神魔改后的项目：<a href="https://github.com/stevenjoezhang/live2d-widget">GitHub - stevenjoezhang/live2d-widget: 把萌萌哒的看板娘抱回家 (ノ≧∇≦)ノ | Live2D widget for web platform</a></p>
<p>下载解压到：<code>themes\butterfly\source\</code>文件夹下</p>
<p><strong>②设置绝对路径</strong></p>
<p><strong>打开项目目录进入修改autoload.js文件，将live2d_path设为自己的路径，一般没什么太大变化都为</strong>：</p>
<p><code>/live2d-widget/</code></p>
<p><strong>③引入</strong></p>
<p>打开butterfly下的layout下的includes目录，点击修改head.pug文件，在文件末尾粘贴：</p>
<p><code>script(src='/live2d-widget/autoload.js')</code></p>
<p>最后在主题配置文件下即butterfly下的_config.yml（如果配置了 _config.butterfly.yml，则使用这个配置文件）中开启看板娘：</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line"># 看板娘</span><br><span class="line">live2d:</span><br><span class="line">  enable: true</span><br></pre></td></tr></table></figure>
<p><strong>④自定义配置（随你）</strong></p>
<ol>
<li>修改看板娘的位置</li>
</ol>
<p>在live2d-widget目录下的waifu.css中可以修改画布位置使得看板娘显示在你指定的位置<br>
具体在#waifu选择器下修改</p>
<ol start="2">
<li>修改聊天内容</li>
</ol>
<p>可以在live2d-widget文件夹下的waifu-tips.json文件中修改，进去就可以看到大量的文本内容</p>
<ol start="3">
<li>修改首次加载的模型</li>
</ol>
<p>如果你不喜欢默认的第一个模型，可以指定首次加载的模型，具体配置在live2d-widget文件夹下的src/index.js中的大约133行，原作者也在这里注释了模型的ID，默认为1，后面的模型依次递增(待补充)</p>
</div></details>
<h3 id="鼠标样式">鼠标样式</h3>
<h3 id="鼠标-字跟随掉落效果">鼠标 * 字跟随掉落效果</h3>
<h3 id="星空背景和流星特效">星空背景和流星特效</h3>
<h3 id="樱花飘落效果">樱花飘落效果</h3>
<h3 id="背景一图流">背景一图流</h3>
<details class="toggle" ><summary class="toggle-button" style="">查看步骤</summary><div class="toggle-content"><div class="note info simple"><p>参考教程：<a href="https://yuqi.fun/posts/f7d3fad8.html">Butterfly主题 一图流背景与顶部图修改 | 与亓のBlog (yuqi.fun)</a></p>
</div>
<p>①<strong>设置背景</strong></p>
<p>这个是 <a href="https://butterfly.js.org/">Butterfly</a> 自带的功能，修改主题的配置文件 <code>_config.butterfly.yml</code>。</p>
<p>编辑 <code>index_img</code>、<code>background</code>、<code>footer_bg</code> 选项。</p>
<p>设置网站背景，并将主页顶部图和页脚背景改为透明。(需要将以下示例地址替换为自己的图片地址。可以用一张具体的图片，也可以用随机图api，随机显示图片)</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line"># Image (圖片設置)</span><br><span class="line"># --------------------------------------</span><br><span class="line"></span><br><span class="line"># The banner image of home page</span><br><span class="line">index_img: transparent</span><br><span class="line"></span><br><span class="line"># Beautify/Effect (美化/效果)</span><br><span class="line"># --------------------------------------</span><br><span class="line"></span><br><span class="line"># Website Background (設置網站背景)</span><br><span class="line"># can set it to color or image (可設置圖片 或者 顔色)</span><br><span class="line"># The formal of image: url(http://xxxxxx.com/xxx.jpg)</span><br><span class="line">background: url(http://xxxxxx.com/xxx.jpg)</span><br><span class="line"></span><br><span class="line"># Footer Background</span><br><span class="line">footer_bg: transparent</span><br></pre></td></tr></table></figure>
<p>②<strong>引入相关样式</strong></p>
<p>新建一个文件，位于 <code>source/css/modify.styl</code>，并增加以下内容。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">@import &#x27;nib&#x27;</span><br><span class="line"></span><br><span class="line">// 顶部图</span><br><span class="line">#page-header</span><br><span class="line">  &amp;, &amp;:before</span><br><span class="line">    background: transparent !important</span><br><span class="line">  &amp;.post-bg, &amp;.not-home-page</span><br><span class="line">    height: 280px !important</span><br><span class="line">  #post-info</span><br><span class="line">    bottom: 40px !important</span><br><span class="line">  #page-site-info</span><br><span class="line">    top: 140px !important</span><br><span class="line"></span><br><span class="line">  @media screen and (max-width: 768px)</span><br><span class="line">    &amp;.not-home-page</span><br><span class="line">      height: 200px !important</span><br><span class="line">    #post-info</span><br><span class="line">      bottom: 10px !important</span><br><span class="line">    #page-site-info</span><br><span class="line">      top: 100px !important</span><br><span class="line"></span><br><span class="line">.top-img</span><br><span class="line">  height: 250px</span><br><span class="line">  margin: -50px -40px 50px</span><br><span class="line">  border-top-left-radius: inherit</span><br><span class="line">  border-top-right-radius: inherit</span><br><span class="line">  background-position: center center</span><br><span class="line">  background-size: cover</span><br><span class="line">  transition: all 0.3s</span><br><span class="line"></span><br><span class="line">  @media screen and (max-width: 768px)</span><br><span class="line">    height: 230px</span><br><span class="line">    margin: -36px -14px 36px</span><br><span class="line"></span><br><span class="line">  [data-theme=&#x27;dark&#x27;] &amp;</span><br><span class="line">    filter: brightness(0.8)</span><br><span class="line"></span><br><span class="line">// 页脚</span><br><span class="line">#footer:before</span><br><span class="line">  background-color: alpha(#FFF, .5)</span><br><span class="line"></span><br><span class="line">  [data-theme=&#x27;dark&#x27;] &amp;</span><br><span class="line">    background-color: alpha(#000, .5)</span><br><span class="line"></span><br><span class="line">#footer-wrap, #footer-wrap a</span><br><span class="line">  color: #111</span><br><span class="line">  transition: unset</span><br><span class="line"></span><br><span class="line">  [data-theme=&#x27;dark&#x27;] &amp;</span><br><span class="line">    color: var(--light-grey)</span><br></pre></td></tr></table></figure>
<p>在主题配置文件 <code>_config.butterfly.yml</code> 的 <code>inject.head</code> 引入样式。</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line"># Inject</span><br><span class="line"># Insert the code to head (before &#x27;&lt;/head&gt;&#x27; tag) and the bottom (before &#x27;&lt;/body&gt;&#x27; tag)</span><br><span class="line"># 插入代码到头部 &lt;/head&gt; 之前 和 底部 &lt;/body&gt; 之前</span><br><span class="line">inject:</span><br><span class="line">  head:</span><br><span class="line">    - &lt;link rel=&quot;stylesheet&quot; href=&quot;/css/modify.css&quot;&gt;</span><br></pre></td></tr></table></figure>
<p><code>modify.styl</code> 会被 Hexo 渲染成 <code>modify.css</code> 文件，所以此处应为 <code>modify.css</code>。</p>
<p>③<strong>增加插件脚本</strong></p>
<p>因为使用了 <code>cheerio</code> 来解析 HTML，所以需要先安装此依赖。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install cheerio</span><br></pre></td></tr></table></figure>
<p>新建一个文件，位于 <code>scripts/modify.js</code>，并增加以下内容。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="meta">&quot;use strict&quot;</span>;</span><br><span class="line"><span class="keyword">const</span> cheerio = <span class="built_in">require</span>(<span class="string">&quot;cheerio&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 在页面插入新顶部图</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">cheerio.Root</span>&#125; $ Root</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">insertTopImg</span>(<span class="params">$</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> header = $(<span class="string">&quot;#page-header&quot;</span>);</span><br><span class="line">  <span class="keyword">if</span> (header.<span class="property">length</span> === <span class="number">0</span>) <span class="keyword">return</span>;</span><br><span class="line">  <span class="keyword">let</span> background = header.<span class="title function_">css</span>(<span class="string">&quot;background-image&quot;</span>);</span><br><span class="line">  <span class="keyword">if</span> (!background) <span class="keyword">return</span>;</span><br><span class="line">  $(<span class="string">&quot;#post, #page, #archive, #tag, #category&quot;</span>).<span class="title function_">prepend</span>(</span><br><span class="line">    <span class="string">`&lt;div class=&quot;top-img&quot; style=&quot;background-image: <span class="subst">$&#123;background&#125;</span>;&quot;&gt;&lt;/div&gt;`</span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">hexo.<span class="property">extend</span>.<span class="property">filter</span>.<span class="title function_">register</span>(<span class="string">&quot;after_render:html&quot;</span>, <span class="keyword">function</span> (<span class="params">str, data</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> $ = cheerio.<span class="title function_">load</span>(str, &#123;</span><br><span class="line">    <span class="attr">decodeEntities</span>: <span class="literal">false</span>,</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="title function_">insertTopImg</span>($);</span><br><span class="line">  <span class="keyword">return</span> $.<span class="title function_">html</span>();</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
</div></details>
<h3 id="顶部导航栏美化">顶部导航栏美化</h3>
<h3 id="基于-Butterfly-的外挂标签引入">基于 Butterfly 的外挂标签引入</h3>
<h3 id="添加贡献日历">添加贡献日历</h3>
<h3 id="键入在线聊天功能">键入在线聊天功能</h3>
<h3 id="留言板信封">留言板信封</h3>
<h3 id="文章加密">文章加密</h3>
]]></content>
      <categories>
        <category>教程</category>
        <category>Butterfly</category>
      </categories>
      <tags>
        <tag>Butterfly</tag>
        <tag>美化</tag>
      </tags>
  </entry>
  <entry>
    <title>Hax&amp;Woiden</title>
    <url>/2022/12/01/Hax-Woiden/</url>
    <content><![CDATA[<div class="note orange icon-padding modern"><i class="note-icon fas fa-bullhorn"></i><p>简单记录一下我每次拿到hax&amp;woiden后做的事</p>
</div>
<div class="note blue icon-padding modern"><i class="note-icon fas fa-bullhorn"></i><p>开始前先看最后的注意事项，本教程仅为个人备忘录，不保证内容正确性</p>
</div>
<hr>
<h2 id="Hax">Hax</h2>
<h3 id="注册ssh连接hax">注册ssh连接hax</h3>
<ul>
<li>注册网站：<a href="https://hax.co.id">https://hax.co.id</a></li>
</ul>
<p><img src="https://s2.loli.net/2022/12/01/HqMyWcrQ4gNBmLb.png" alt=""></p>
<ul>
<li>翻译一下就看懂，其实很简单的，没啥<br>
创建ipv4转发后，ssh连就好了，步骤就懒得说了，我电脑用的<a href="https://www.hostbuf.com/c/131.html">FinalShell</a>（很少用了）和<a href="https://github.com/kingToolbox/WindTerm/releases">WindTerm</a>，手机用的 JuiceSSH</li>
<li>当然也可以不用创建ipv4转发，可以直接用<a href="https://ssh.hax.co.id/">官方的网页ssh登录</a>，直接用ipv6。</li>
</ul>
<h3 id="安装warp和x-ui">安装warp和x-ui</h3>
<ul>
<li>
<p>安装warp（F佬 WARP脚本）<br>
复制粘贴进ssh回车运行：<br>
<code>wget -N https://raw.githubusercontent.com/fscarmen/warp/main/menu.sh &amp;&amp; bash menu.sh</code><br>
（也可以用其他的warp脚本，见）<br>
点击第一个，添加warp ipv4网络接口(有可能刷新不出来ip，可以试试其他warp脚本)</p>
</li>
<li>
<p>安装x-ui面板（二选一）<br>
①<a href="https://github.com/vaxilu/x-ui">安装原版x-ui面板</a><br>
直接一条命令回车，然后看脚本，安装，设置用户名密码端口，浏览器访问，然后直接面板操作<br>
<code>bash &lt;(curl -Ls https://raw.githubusercontent.com/vaxilu/x-ui/master/install.sh)</code></p>
<p>②<a href="https://github.com/FranzKafkaYu/x-ui">FranzKafkaYu版x-ui面板</a><br>
<code>bash &lt;(curl -Ls https://raw.githubusercontent.com/FranzKafkaYu/x-ui/master/install.sh)</code></p>
</li>
</ul>
<hr>
<h2 id="woiden">woiden</h2>
<h3 id="注册-ssh连接woiden">注册&amp;ssh连接woiden</h3>
<ul>
<li>
<p>注册网站：<a href="https://woiden.id">https://woiden.id</a></p>
<p><img src="https://s2.loli.net/2022/12/01/3PbXpuvNDyVHfWd.png" alt=""></p>
</li>
<li>
<p>也是一样的，其实woiden和hax流程都差不多的，一个纯ipv6机器，一个nat机器。这里就不多说了</p>
</li>
</ul>
<h3 id="安装warp和x-ui-2">安装warp和x-ui</h3>
<ul>
<li>
<p>安装warp（F佬 WARP脚本）<br>
一、复制粘贴进ssh回车运行（需要先开启TUN模块，方法在文章下方）：<br>
<code>wget -N https://raw.githubusercontent.com/fscarmen/warp/main/menu.sh &amp;&amp; bash menu.sh [option] [lisence]</code><br>
点击第一个，添加warp ipv4网络接口</p>
</li>
<li>
<p>安装x-ui面板（二选一）<br>
①<a href="https://github.com/vaxilu/x-ui">安装原版x-ui面板</a><br>
直接一条命令回车，然后看脚本，安装，设置用户名密码端口，浏览器访问，然后直接面板操作<br>
<code>bash &lt;(curl -Ls https://raw.githubusercontent.com/vaxilu/x-ui/master/install.sh)</code></p>
<p>②<a href="https://github.com/FranzKafkaYu/x-ui">FranzKafkaYu版x-ui面板</a><br>
<code>bash &lt;(curl -Ls https://raw.githubusercontent.com/FranzKafkaYu/x-ui/master/install.sh)</code></p>
</li>
</ul>
<hr>
<h2 id="套cf加速">套cf加速</h2>
<ul>
<li>
<p>上面创建好的节点只有ipv6，没有ipv4，有些网站、软件只能用ipv4，所以还需要套cf加速</p>
</li>
<li>
<p>教程：<br>
一、注册<a href="https://dash.cloudflare.com/">cloudflre</a>和<a href="https://www.freenom.com/">freenom</a>，当然也可以不用freenom免费域名，随便你，freenom免费域名注册方法自行谷歌<br>
二、在cf首页点击添加网站，将注册好的域名添加到cf上，点网站点进去，左侧添加dns，然后添加ssl</p>
<p><img src="https://s2.loli.net/2022/12/01/OKyJXWL1cTiQ3Ig.png" alt="image-20221201214543449"></p>
<p><img src="https://s2.loli.net/2022/12/01/istrzWTujABcv6K.png" alt=""></p>
<p><img src="https://s2.loli.net/2022/12/01/pSj784milUPNKC9.png" alt=""></p>
<p><img src="https://s2.loli.net/2022/12/01/n1aDzQYKEkT5gI7.png" alt=""></p>
</li>
</ul>
<hr>
<h2 id="注意事项">注意事项</h2>
<p>1.hax网站可能进不去，那是因为你开启了去广告的浏览器插件<br>
2.如果hax中你没用去广告的浏览器插件，那可能是fq软件里面的去广告规则导致的，把相应的关闭就行，以v2rayN为例：设置➡路由设置➡双击绕过大陆➡规则列表里找到block双击打开，在geosite:category-ads-all前面加个#➡保存<br>
3.可以不用节点，只不过网站进去有点慢<br>
4.Hax / Woiden OpenVZ VPS开启TUN模块教程<br>
①.在<a href="https://hax.co.id/vps-control">https://hax.co.id/vps-control</a> （或<a href="https://woiden.id/vps-control%EF%BC%89">https://woiden.id/vps-control）</a> 点击Enable TUN按钮<br>
②.待TUN模块启动成功后，先Stop让VPS关机，然后再Start开机<br>
③.输入此命令：<code>cat /dev/net/tun</code> ，然后看见cat: /dev/net/tun: File descriptor in bad state即为成功启用TUN模块<br>
5.也可以不用x-ui面板，把命令换成下面这个就行<br>
<code>bash &lt;(curl -s -L https://git.io/v2ray.sh)</code><br>
6.hax和woiden每天北京时间凌晨1点补货（要抢），7天续期，tg机器人最后两天会发消息提醒<br>
7.WARP 各大一键脚本<br>
①FSCARMEN (<a href="https://github.com/fscarmen/warp">https://github.com/fscarmen/warp</a>) :</p>
<ul>
<li>首次运行 <code>wget -N   https://raw.githubusercontent.com/fscarmen/warp/main/menu.sh &amp;&amp; bash menu.sh</code></li>
<li>日常维护 <code>warp</code></li>
</ul>
<p>P3TERX (<a href="https://github.com/P3TERX/warp.sh">https://github.com/P3TERX/warp.sh</a>) :</p>
<ul>
<li>首次运行 <code>bash &lt;(curl -fsSL git.io/warp.sh) menu</code></li>
<li>日常维护 <code>bash warp.sh</code></li>
</ul>
<p>WARP-GO (<a href="https://gitlab.com/ProjectWARP/warp-go/-/tree/master/">https://gitlab.com/ProjectWARP/warp-go/-/tree/master/</a>) :</p>
<ul>
<li>首次运行 <code>wget -N https://raw.githubusercontent.com/fscarmen/warp/main/warp-go.sh &amp;&amp; bash warp-go.sh</code></li>
<li>日常维护 <code>warp-go</code><br>
8.安装bbr加速（仅限KVM，openvz不行，但可以自己网上找魔改bbr）<br>
①可以使用virt-what查看VPS 使用哪种虚拟化技术（OpenVZ KVM Xen），具体的自行Google<br>
卸载内核版本 (一般用这个即可)<br>
<code> wget -O tcp.sh &quot;https://git.io/coolspeeda&quot; &amp;&amp; chmod +x tcp.sh &amp;&amp; ./tcp.sh</code><br>
不卸载内核版本<br>
<code> wget -O tcpx.sh &quot;https://git.io/JYxKU&quot; &amp;&amp; chmod +x tcpx.sh &amp;&amp; ./tcpx.sh</code></li>
</ul>
<p>一般BBR+FQ加速就行，当然也可以不使用bbr</p>
]]></content>
      <categories>
        <category>教程</category>
        <category>VPS</category>
      </categories>
      <tags>
        <tag>白嫖VPS</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo常用命令</title>
    <url>/2022/12/14/Hexo%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</url>
    <content><![CDATA[<h2 id="新建并部署上传">新建并部署上传</h2>
<h3 id="新建">新建</h3>
<p><code>hexo new [layout] &lt;title&gt;</code><br>
新建一篇文章。如果没有设置 layout 的话，默认使用 _config.yml 中的 default_layout 参数代替。如果标题包含空格的话，请使用引号括起来。<br>
例如：<code>hexo new &quot;post title with whitespace&quot;</code></p>
<h3 id="清除缓存文件">清除缓存文件</h3>
<p><code>hexo clean</code><br>
清除缓存文件 (db.json) 和已生成的静态文件 (public)。<br>
在某些情况（尤其是更换主题后），如果发现您对站点的更改无论如何也不生效，您可能需要运行该命令。</p>
<h3 id="生成静态文件">生成静态文件</h3>
<p><code>hexo generate</code>   #该命令可以简写为:<code>hexo g</code></p>
<table>
<thead>
<tr>
<th><strong>选项</strong></th>
<th><strong>描述</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td>-d ,  --deploy</td>
<td>文件生成后立即部署网站</td>
</tr>
<tr>
<td>-w ,  --watch</td>
<td>监视文件变动</td>
</tr>
<tr>
<td>-b ,  --bail</td>
<td>生成过程中如果发生任何未处理的异常则抛出异常</td>
</tr>
<tr>
<td>-f ,  --force</td>
<td>强制重新生成文件<br/>Hexo 引入了差分机制，如果 <code>public</code> 目录存在，那么 <code>hexo g</code> 只会重新生成改动的文件。<br/>使用该参数的效果接近 <code>hexo clean &amp;&amp; hexo generate</code></td>
</tr>
<tr>
<td>-c ,  --concurrency</td>
<td>最大同时生成文件的数量，默认无限制</td>
</tr>
</tbody>
</table>
<h3 id="本地预览">本地预览</h3>
<p><code>hexo server</code>   #该命令可以简写为：hexo s<br>
启动服务器。默认情况下，访问网址为： <a href="http://localhost:4000/">http://localhost:4000/</a></p>
<table>
<thead>
<tr>
<th><strong>选项</strong></th>
<th><strong>描述</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td>-p, --port</td>
<td>重设端口</td>
</tr>
<tr>
<td>-s ,  --static</td>
<td>只使用静态文件</td>
</tr>
<tr>
<td>-l ,  --log-s ,  --static</td>
<td>启动日记记录，使用覆盖记录格式</td>
</tr>
</tbody>
</table>
<h3 id="部署网站">部署网站</h3>
<p><code>hexo deploy</code>   #该命令可以简写为：hexo d<br>
部署网站并上传</p>
<table>
<thead>
<tr>
<th><strong>参数</strong></th>
<th><strong>描述</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td>-g ,  --generate</td>
<td>部署之前预先生成静态文件</td>
</tr>
</tbody>
</table>
<ul>
<li>显示 Hexo 版本<br>
<code>hexo version</code></li>
</ul>
<h2 id="待补充">待补充</h2>
]]></content>
      <categories>
        <category>笔记</category>
      </categories>
      <tags>
        <tag>Hexo命令</tag>
      </tags>
  </entry>
  <entry>
    <title>VMware Workstation Pro教程一：安装软件</title>
    <url>/2023/10/18/VMware-Workstation-Pro%E6%95%99%E7%A8%8B%E4%B8%80%EF%BC%9A%E5%AE%89%E8%A3%85%E8%BD%AF%E4%BB%B6/</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title>Linux常用命令</title>
    <url>/2022/12/13/Linux%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</url>
    <content><![CDATA[<h1>常用命令</h1>
<h2 id="Linux更新及常用软件安装命令">Linux更新及常用软件安装命令</h2>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Debian更新：apt-get update &amp;&amp; apt-get upgrade</span><br><span class="line">Centos更新：yum update	</span><br><span class="line"></span><br><span class="line">Debian安装curl：apt-get install curl</span><br><span class="line">Centos安装curl：yum install curl		</span><br><span class="line"></span><br><span class="line">Debian安装wget：apt-get install wget</span><br><span class="line">Centos安装wget：yum install wget		</span><br><span class="line"></span><br><span class="line">Centos安装XZ压缩工具：yum install xz</span><br><span class="line">ubuntu安装rz/sz命令：apt-get install lrzsz</span><br><span class="line"></span><br><span class="line">总结：apt-get install curl wget lrzsz vim cron unzip screen</span><br></pre></td></tr></table></figure>
<details class="toggle" ><summary class="toggle-button" style="">点击此处展开/收起内容，来自 chatgpt 的解释</summary><div class="toggle-content"><ol>
<li><code>curl</code>：用于在终端中进行网络请求和数据传输，支持各种协议（如 HTTP、HTTPS、FTP 等）。<br></li>
<li><code>wget</code>：用于从Web服务器下载文件，支持HTTP、HTTPS和FTP协议，具有断点续传功能。<br></li>
<li><code>lrzsz</code>：提供了Xmodem、Ymodem和Zmodem等协议的文件传输功能，用于通过终端与远程主机进行文件传输。<br></li>
<li><code>vim</code>：一种强大的文本编辑器，常用于命令行环境下编辑文本文件。<br></li>
<li><code>cron</code>：用于在预定时间自动运行命令或脚本的任务调度程序。<br></li>
<li><code>unzip</code>：用于解压缩ZIP格式的压缩文件。<br></li>
<li><code>screen</code>：用于在终端中创建和管理多个会话，允许在不同的终端窗口或会话之间切换。</li>
</ol>
</div></details>
<h2 id="Debian-Ubuntu-基础命令">Debian/Ubuntu 基础命令</h2>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">更新软件源：apt-get update  </span><br><span class="line">更新升级所有软件：apt-get upgrade  </span><br><span class="line">  </span><br><span class="line">清理旧版本的软件缓存：sudo apt-get autoclean  </span><br><span class="line">清理所有软件缓存：sudo apt-get clean  </span><br><span class="line">删除系统不再使用的孤立软件：sudo apt-get autoremove  </span><br><span class="line">  </span><br><span class="line">screen的一些基本命令：  </span><br><span class="line">- #创建一个名为session_name的新窗口  </span><br><span class="line">  screen -S session_name  </span><br><span class="line">- #查看创建的窗口  </span><br><span class="line"> screen -ls  </span><br><span class="line">- #退出当前会话  </span><br><span class="line"> Ctrl+c+d  </span><br><span class="line">- #关闭当前窗口  </span><br><span class="line"> Ctrl-a k  </span><br><span class="line">- #删除cs窗口  </span><br><span class="line"> screen -X -S session_name quit  </span><br><span class="line">- #回到某个窗口  </span><br><span class="line"> screen -r 窗口名  </span><br><span class="line">   </span><br><span class="line">查看内置存储设备的使用寿命信息：cat /sys/class/mmc_host/mmc0/mmc0\:0001/life_time  </span><br><span class="line">  </span><br><span class="line">查看内核版本：uname -a  </span><br><span class="line">查看ubuntu版本：cat /etc/issue  </span><br><span class="line">关闭系统电源：sudo systemctl poweroff  </span><br><span class="line">文件系统的磁盘使用情况：df -h  </span><br><span class="line">查看Debian系统的交换内存使用情况free -h  </span><br><span class="line">查看当前的内存使用情况：free -m  </span><br><span class="line">查看当前有哪些进程：ps -A  </span><br><span class="line">杀死一个进程：kill id / killall id / kill -9 id  </span><br><span class="line">安装 openssh-server：sudo apt-get install openssh-server  </span><br><span class="line">确认sshserver是否启动：ps -e | grep ssh  </span><br><span class="line">  </span><br><span class="line">Linux开启原版BBR：  </span><br><span class="line">echo &quot;net.core.default_qdisc=fq&quot; &gt;&gt; /etc/sysctl.conf  </span><br><span class="line">echo &quot;net.ipv4.tcp_congestion_control=bbr&quot; &gt;&gt; /etc/sysctl.conf  </span><br><span class="line">sysctl -p  </span><br><span class="line">lsmod | grep bbr</span><br></pre></td></tr></table></figure>
<hr>
<h2 id="Linux-常用的一键脚本">Linux 常用的一键脚本</h2>
<h3 id="一、经常使用的脚本">一、经常使用的脚本</h3>
<ol>
<li>
<p>X-UI 一键脚本<br>
①<a href="https://github.com/vaxilu/x-ui">原版</a> :<br>
<code>bash &lt;(curl -Ls https://raw.githubusercontent.com/vaxilu/x-ui/master/install.sh)</code><br>
②<a href="https://github.com/FranzKafkaYu/x-ui">FranzKafkaYu</a> :<br>
<code>bash &lt;(curl -Ls https://raw.githubusercontent.com/FranzKafkaYu/x-ui/master/install.sh)</code><br>
③V2ray-233blog 一键创建节点<br>
<code>bash &lt;(curl -s -L https://git.io/v2ray.sh)</code></p>
</li>
<li>
<p>WARP 一键脚本<br>
①FSCARMEN (<a href="https://gitlab.com/fscarmen/warp.git">fscarmen / warp · GitLab</a>) :<br>
首次运行 <code>wget -N https://gitlab.com/fscarmen/warp/-/raw/main/menu.sh &amp;&amp; bash menu.sh</code><br>
日常维护 <code>warp</code><br>
②P3TERX (<a href="https://github.com/P3TERX/warp.sh">https://github.com/P3TERX/warp.sh</a>) :<br>
首次运行 <code>bash &lt;(curl -fsSL git.io/warp.sh) menu</code><br>
日常维护 <code>bash warp.sh</code><br>
③WARP-GO (<a href="https://gitlab.com/ProjectWARP/warp-go/-/tree/master/">https://gitlab.com/ProjectWARP/warp-go/-/tree/master/</a>) :<br>
首次运行 <code>wget -N https://gitlab.com/fscarmen/warp/-/raw/main/menu.sh &amp;&amp; bash menu.sh</code><br>
日常维护 <code>warp-go</code></p>
</li>
<li>
<p>bbr 加速（仅限 KVM，openvz 不行，但可以自己网上找魔改 bbr）</p>
</li>
</ol>
<details class="toggle" ><summary class="toggle-button" style="">官网链接地址，点击打开</summary><div class="toggle-content"><p><a href="https://blog.ylx.me/archives/783.html">Linux 一键安装常见/最新内核脚本锐速/BBRPLUS/BBR2 [100.0.1.25] - HJM</a> <br><br>
<a href="https://github.com/ylx2016/Linux-NetSpeed">GitHub - ylx2016/Linux-NetSpeed: 将Linux现常用的网络加速集成在一起</a></p>
</div></details>
<blockquote>
<p>一般 BBR+FQ 加速就行，当然也可以不使用 bbr</p>
</blockquote>
<h3 id="二、以下一键脚本本人未测试，来自网上搜集，自行决定">二、以下一键脚本本人未测试，来自网上搜集，自行决定</h3>
<ol>
<li>
<p>V2ray-agent：<br>
Github地址：<a href="https://github.com/mack-a/v2ray-agent">https://github.com/mack-a/v2ray-agent</a><br>
支持快捷方式启动，安装完毕后，shell输入【vasma】即可打开脚本，脚本执行路径[/etc/v2ray-agent/install.sh]</p>
</li>
<li>
<p>Latest Version<br>
<code>wget -P /root -N --no-check-certificate &quot;https://raw.githubusercontent.com/mack-a/v2ray-agent/master/install.sh&quot; &amp;&amp; chmod 700 /root/install.sh &amp;&amp; /root/install.sh</code></p>
</li>
<li>
<p>Stable-v2.4.16【无gRPC】<br>
<code>wget -P /root -N --no-check-certificate &quot;https://raw.githubusercontent.com/mack-a/v2ray-agent/stable_v2.4.16/install.sh&quot; &amp;&amp; chmod 700 /root/install.sh &amp;&amp; /root/install.sh</code></p>
</li>
<li>
<p>UnixBench跑分工具测试<br>
UnixBench下载地址：<a href="https://code.google.com/archive/p/byte-unixbench/downloads">https://code.google.com/archive/p/byte-unixbench/downloads</a><br>
<code>wget --no-check-certificate http://tools.laobuluo.com/tools/unixbench.sh chmod +x unixbench.sh ./unixbench.sh</code></p>
</li>
<li>
<p><a href="http://bench.sh">bench.sh</a> 测速脚本<br>
Github地址：<a href="https://github.com/teddysun/across">https://github.com/teddysun/across</a><br>
<code>wget -qO- bench.sh | bash</code><br>
或者<br>
<code>curl -Lso- bench.sh | bash</code></p>
</li>
<li>
<p>BestTrace 路由追踪<br>
<code>wget https://cdn.ipip.net/17mon/besttrace4linux.zip</code><br>
<code>unzip besttrace4linux.zip</code><br>
<code>chmod +x besttrace</code><br>
<code>./besttrace 114.114.114.114</code></p>
</li>
<li>
<p>流媒体解锁检测脚本<br>
Github地址：<a href="https://github.com/sjlleo/netflix-verify">https://github.com/sjlleo/netflix-verify</a></p>
</li>
<li>
<p>Netflix 解锁检测脚本<br>
<code>wget -O nf https://github.com/sjlleo/netflix-verify/releases/download/2.61/nf_2.61_linux_amd64 &amp;&amp; chmod +x nf &amp;&amp; clear &amp;&amp; ./nf</code></p>
</li>
</ol>
<hr>
<h1>进阶命令</h1>
<h2 id="docker和docker-compose安装与配置">docker和docker-compose安装与配置</h2>
<blockquote>
<p>更多请查看：  <a href="https://www.runoob.com/docker/docker-tutorial.html">Docker 教程 | 菜鸟教程 (runoob.com)</a></p>
</blockquote>
<h3 id="一、安装docker">一、安装docker</h3>
<ol>
<li>
<p>以 root 用户登录，执行一键脚本安装 Docker<br>
升级源并安装软件（下面两行命令二选一，根据你自己的系统）<br>
Debian / Ubuntu<br>
<code>apt-get update &amp;&amp; apt-get install -y wget vim</code><br>
CentOS<br>
<code>yum update &amp;&amp; yum install -y wget vim</code></p>
</li>
<li>
<p>执行此命令等候安装 Docker</p>
</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#Ubuntu  </span><br><span class="line">curl -fsSL https://test.docker.com -o test-docker.sh  </span><br><span class="line">sudo sh test-docker.sh  </span><br><span class="line">  </span><br><span class="line">#Debian  </span><br><span class="line">curl -fsSL https://get.docker.com -o get-docker.sh  </span><br><span class="line">sudo sh get-docker.sh  </span><br><span class="line">  </span><br><span class="line">#CentOS  </span><br><span class="line">curl -fsSL https://get.docker.com | bash -s docker --mirror Aliyun</span><br></pre></td></tr></table></figure>
<p>​		也可以使用国内 daocloud 一键安装命令：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">curl -sSL https://get.daocloud.io/docker | sh</span><br></pre></td></tr></table></figure>
<blockquote>
<p>说明：请使用 KVM 架构的 VPS，OpenVZ 架构的 VPS 不支持安装 Docker。 更多关于 Docker 安装的内容参考 <a href="https://docs.docker.com/engine/install/">Docker 官方安装指南</a> 。</p>
</blockquote>
<ol start="3">
<li>国内源推荐  ：</li>
</ol>
<p>​		<a href="http://hub-mirror.c.163.com/">http://hub-mirror.c.163.com</a><br>
​		<a href="https://registry.docker-cn.com/">https://registry.docker-cn.com</a><br>
​		<a href="https://docker.mirrors.ustc.edu.cn/">https://docker.mirrors.ustc.edu.cn</a><br>
​		<a href="https://docker.mirrors.ustc.edu.cn/">https://docker.mirrors.ustc.edu.cn</a></p>
<h3 id="二、安装docker-compose">二、安装docker-compose</h3>
<ol>
<li>最新发行的版本地址：<a href="https://github.com/docker/compose/releases">https://github.com/docker/compose/releases</a></li>
<li>运行以下命令以下载Docker Compose的当前稳定版本：</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo curl -L &quot;https://github.com/docker/compose/releases/download/v2.2.2/docker-compose-$(uname -s)-$(uname -m)&quot; -o /usr/local/bin/docker-compose</span><br></pre></td></tr></table></figure>
<blockquote>
<p>注意: 如果无法下载,可以本地下载好后上传到服务器/usr/local/bin/即可</p>
</blockquote>
<ol start="3">
<li>将可执行权限应用于二进制文件：</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo chmod +x /usr/local/bin/docker-compose</span><br></pre></td></tr></table></figure>
<blockquote>
<p>注意：如果命令docker-compose在安装后失败，请检查您的路径。您还可以创建指向/usr/local/bin/或路径中任何其他目录的符号链接。</p>
</blockquote>
<ol start="4">
<li>创建软链：</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo ln -s /usr/local/bin/docker-compose /usr/bin/docker-compose</span><br></pre></td></tr></table></figure>
<blockquote>
<p>注意：如果命令 docker-compose 在安装后失败，请检查您的路径。您还可以创建指向/usr/local/bin/或路径中任何其他目录的符号链接。</p>
</blockquote>
<ol start="5">
<li>测试安装</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker-compose --version</span><br></pre></td></tr></table></figure>
<ol start="6">
<li>bash 命令补齐(一般不需要)</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">curl -L https://raw.githubusercontent.com/docker/compose/2.2.2/contrib/completion/bash/docker-compose &gt; /etc/bash_completion.d/docker-compose</span><br></pre></td></tr></table></figure>
<ol start="7">
<li>卸载docker-compose</li>
</ol>
<blockquote>
<p>直接移除二进制包即可</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo rm /usr/local/bin/docker-compose</span><br></pre></td></tr></table></figure>
<h2 id="docker常用命令">docker常用命令</h2>
<ol>
<li><strong>常用</strong></li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">systemctl start docker                    #启动  </span><br><span class="line">  </span><br><span class="line">systemctl stop docker                     #停止  </span><br><span class="line">  </span><br><span class="line">systemctl restart docker                  #重启  </span><br><span class="line">  </span><br><span class="line">systemctl enable docker                   #开机自启动  </span><br><span class="line">  </span><br><span class="line">systemctl status docker                   #运行状态  </span><br><span class="line">  </span><br><span class="line">docker version                            #Docker 版本信息  </span><br><span class="line">  </span><br><span class="line">docker info                               #Docker 系统信息  </span><br><span class="line">  </span><br><span class="line">docker ps                                 #查看正在运行的容器  </span><br><span class="line">docker ps -a                              #查看所有容器  </span><br><span class="line">docker ps -qa                             #仅显示 id 号，常用于批量删除容器  </span><br><span class="line">docker rm 容器id                          #删除指定容器  </span><br><span class="line">  </span><br><span class="line">docker images                             #查看本地所有的镜像  </span><br><span class="line">docker images -q                          #仅显示镜像id，常用于批量删除镜像  </span><br><span class="line">  </span><br><span class="line">docker rmi 镜像id或镜像名称的前缀即可         #删除指定的本地镜像  </span><br><span class="line">docker rmi `docker images -q`             #删除所有本地镜像  </span><br><span class="line">  </span><br><span class="line">#进入容器  </span><br><span class="line">docker exec -it 容器名 bash  </span><br><span class="line">  </span><br><span class="line">#退出容器  </span><br><span class="line">exit                                      #容器直接退出  </span><br><span class="line">ctrl +P +Q                                #容器不停止退出 	  </span><br><span class="line">  </span><br><span class="line">docker port	        #列出指定的容器的端口映射，或者查找将PRIVATE_PORT NAT到面向公众的端口  </span><br><span class="line">docker ps	        #列出容器  </span><br><span class="line">docker pull	        #从镜像仓库中拉取或者更新指定镜像  </span><br><span class="line">docker push	        #将本地的镜像上传到镜像仓库,要先登陆到镜像仓库  </span><br><span class="line">docker rename       #重命名容器  </span><br><span class="line">docker top 容器名称                       #查看容器中运⾏的进程  </span><br><span class="line">docker stats 容器名称                     #查看资源占⽤  </span><br><span class="line">docker cp 容器id:容器内路径  主机目的路径	#从容器内拷贝到主机上</span><br></pre></td></tr></table></figure>
<ol start="2">
<li><strong>命令大全（网上搜集）</strong></li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker attach	#连接到正在运行中的容器  </span><br><span class="line">docker build	#使用 Dockerfile 创建镜像  </span><br><span class="line">docker builder	#管理builds  </span><br><span class="line">    docker builder prune	#清除build缓存  </span><br><span class="line">docker checkpoint	#管理checkpoints  </span><br><span class="line">    docker checkpoint create	#从正在运行的容器创建检查点  </span><br><span class="line">    docker checkpoint ls	#列出容器的检查点  </span><br><span class="line">    docker checkpoint rm	#删除指定的检查点  </span><br><span class="line">docker commit	#从容器创建一个新的镜像  </span><br><span class="line">docker config	#管理Docker配置  </span><br><span class="line">    docker config create	#创建配置文件  </span><br><span class="line">    docker config inspect	#查看配置文件信息  </span><br><span class="line">    docker config ls		#显示docker里已经保存得配置文件  </span><br><span class="line">    docker config rm		#删除配置文件  </span><br><span class="line">docker container	#管理容器  </span><br><span class="line">    docker container prune	#删除所有已停止的容器  </span><br><span class="line">docker context	#管理contexts  </span><br><span class="line">    docker context create	#创建一个上下文  </span><br><span class="line">    docker context export	#将上下文导出到tar或kubecconfig文件中  </span><br><span class="line">    docker context import	#从tar或zip文件导入上下文  </span><br><span class="line">    docker context inspect	#在一个或多个上下文上显示详细信息  </span><br><span class="line">    docker context ls		#列出上下文  </span><br><span class="line">    docker context rm		#删除一个或多个上下文  </span><br><span class="line">    docker context update	#更新  </span><br><span class="line">    docker context use		#设置当前docker的上下文  </span><br><span class="line">docker cp		#用于容器与主机之间的数据拷贝  </span><br><span class="line">docker create	#创建一个新的容器但不启动它  </span><br><span class="line">docker diff		#检查容器里文件结构的更改  </span><br><span class="line">docker events	#从服务器获取实时事件  </span><br><span class="line">docker exec		#在运行的容器中执行命令  </span><br><span class="line">docker export	#将文件系统作为一个tar归档文件导出到STDOUT  </span><br><span class="line">docker history	#查看指定镜像的创建历史  </span><br><span class="line">docker image	#管理镜像  </span><br><span class="line">    docker image inspect	#显示一个或多个镜像的元数据  </span><br><span class="line">    docker image ls			#列出本地镜像  </span><br><span class="line">    docker image prune		#删除没有使用的镜像  </span><br><span class="line">    docker image rm			#删除一个或多个镜像  </span><br><span class="line">docker images	#列出本地镜像  </span><br><span class="line">docker import	#从归档文件中创建镜像  </span><br><span class="line">docker info		#显示 Docker 系统信息，包括镜像和容器数  </span><br><span class="line">docker inspect	#获取容器/镜像的元数据  </span><br><span class="line">docker kill		#杀掉一个运行中的容器  </span><br><span class="line">docker load		#导入使用 docker save 命令导出的镜像  </span><br><span class="line">docker login	#登陆到一个Docker镜像仓库，如果未指定镜像仓库地址，默认为官方仓库 Docker Hub  </span><br><span class="line">docker logout	#登出一个Docker镜像仓库，如果未指定镜像仓库地址，默认为官方仓库 Docker Hub  </span><br><span class="line">docker logs		#获取容器的日志  </span><br><span class="line">docker manifest	#管理manifest(实验，不应用于生产环境)  </span><br><span class="line">    docker manifest annotate	#向本地镜像清单添加附加信息  </span><br><span class="line">    docker manifest create		#创建用于注释和推入注册表的本地清单列表  </span><br><span class="line">    docker manifest inspect		#显示镜像清单或清单列表  </span><br><span class="line">    docker manifest push		#将清单列表推入仓库  </span><br><span class="line">    docker manifest rm			#从本地存储中删除一个或多个清单列表  </span><br><span class="line">docker network	#管理网络  </span><br><span class="line">    docker network connect		#将容器连接到网络  </span><br><span class="line">    docker network create		#创建一个网络  </span><br><span class="line">    docker network disconnect	#断开容器的网络  </span><br><span class="line">    docker network inspect		#显示一个或多个网络的元数据  </span><br><span class="line">    docker network ls			#列出网络  </span><br><span class="line">    docker network prune		#删除所有没有使用的网络  </span><br><span class="line">    docker network rm			#删除一个或多个网络  </span><br><span class="line">docker node		#管理集群(swarm)节点  </span><br><span class="line">    docker node demote			#从群集(swarm)管理器中降级一个或多个节点  </span><br><span class="line">    docker node inspect			#显示一个或多个节点的元数据  </span><br><span class="line">    docker node ls				#列出群集(swarm)中的节点  </span><br><span class="line">    docker node promote			#将一个或多个节点推入到群集管理器中  </span><br><span class="line">    docker node ps				#列出在一个或多个节点上运行的任务，默认为当前节点  </span><br><span class="line">    docker node rm				#从群集(swarm)删除一个或多个节点  </span><br><span class="line">    docker node update			#更新一个节点  </span><br><span class="line">docker pause	#暂停容器中所有的进程  </span><br><span class="line">docker plugin	#管理插件  </span><br><span class="line">    docker plugin create		#从rootfs和配置创建一个插件。插件数据目录必须包含config.json和rootfs目录。  </span><br><span class="line">    docker plugin disable		#禁用插件  </span><br><span class="line">    docker plugin enable		#启用插件  </span><br><span class="line">    docker plugin inspect		#显示一个或多个插件的元数据  </span><br><span class="line">    docker plugin install		#安装一个插件  </span><br><span class="line">    docker plugin ls			#列出所有插件  </span><br><span class="line">    docker plugin push			#将插件推送到注册表  </span><br><span class="line">    docker plugin rm			#删除一个或多个插件  </span><br><span class="line">    docker plugin set			#更改插件的设置  </span><br><span class="line">    docker plugin upgrade		#升级现有插件  </span><br><span class="line">docker port		#列出指定的容器的端口映射，或者查找将PRIVATE_PORT NAT到面向公众的端口  </span><br><span class="line">docker ps		#列出容器  </span><br><span class="line">docker pull		#从镜像仓库中拉取或者更新指定镜像  </span><br><span class="line">docker push		#将本地的镜像上传到镜像仓库,要先登陆到镜像仓库  </span><br><span class="line">docker rename	#重命名容器  </span><br><span class="line">docker restart	#重启容器  </span><br><span class="line">docker rm		#删除一个或多个容器  </span><br><span class="line">docker rmi		#删除一个或多个镜像  </span><br><span class="line">docker run		#创建一个新的容器并运行一个命令  </span><br><span class="line">docker save		#将指定镜像保存成 tar 归档文件  </span><br><span class="line">docker search	#从Docker Hub查找镜像  </span><br><span class="line">docker secret	#管理Docker secrets  </span><br><span class="line">    docker secret create	#从文件或STDIN创建一个秘密作为内容  </span><br><span class="line">    docker secret inspect	#显示有关一个或多个秘密的详细信息  </span><br><span class="line">    docker secret ls		#列出秘密  </span><br><span class="line">    docker secret rm		#删除一个或多个秘密  </span><br><span class="line">docker service	#管理服务  </span><br><span class="line">    docker service create	#创建一个服务  </span><br><span class="line">    docker service inspect	#查看服务的元数据  </span><br><span class="line">    docker service logs		#获取服务的日志  </span><br><span class="line">    docker service ls		#列出服务  </span><br><span class="line">    docker service ps		#列出一个或多个服务的任务  </span><br><span class="line">    docker service rm		#删除一个或多个服务  </span><br><span class="line">    docker service rollback	#将更改恢复到服务的配置  </span><br><span class="line">    docker service scale	#缩放一个或多个复制服务  </span><br><span class="line">    docker service update	#更新服务  </span><br><span class="line">docker stack	#管理堆栈  </span><br><span class="line">    docker stack deploy		#部署新的堆栈或更新现有堆栈  </span><br><span class="line">    docker stack ls			#列出现有堆栈  </span><br><span class="line">    docker stack ps			#列出堆栈中的任务  </span><br><span class="line">    docker stack rm			#删除堆栈	  </span><br><span class="line">    docker stack services	#列出堆栈中的服务  </span><br><span class="line">docker start	#启动一个或多个已经被停止的容器  </span><br><span class="line">docker stats	#显示容器的实时流资源使用统计信息  </span><br><span class="line">docker stop		#停止一个运行中的容器  </span><br><span class="line">docker swarm	#管理集群(Swarm)  </span><br><span class="line">    docker swarm ca			#查看或旋转当前群集CA证书。此命令必须针对管理器节点  </span><br><span class="line">    docker swarm init		#初始化一个群集(Swarm)  </span><br><span class="line">    docker swarm join		#加入群集作为节点和/或管理器  </span><br><span class="line">    docker swarm join-token	#管理加入令牌  </span><br><span class="line">    docker swarm leave		#离开群集(Swarm)  </span><br><span class="line">    docker swarm unlock		#解锁群集(Swarm)  </span><br><span class="line">    docker swarm unlock-key	#管理解锁钥匙  </span><br><span class="line">    docker swarm update		#更新群集(Swarm)  </span><br><span class="line">docker system	#管理Docker  </span><br><span class="line">    docker system df		#显示docker磁盘使用情况  </span><br><span class="line">    docker system events	#从服务器获取实时事件  </span><br><span class="line">    docker system info		#显示系统范围的信息  </span><br><span class="line">    docker system prune		#删除未使用的数据  </span><br><span class="line">docker tag		#标记本地镜像，将其归入某一仓库  </span><br><span class="line">docker top		#查看容器中运行的进程信息，支持 ps 命令参数  </span><br><span class="line">docker trust	#管理Docker镜像的信任  </span><br><span class="line">    docker trust inspect	#返回有关key和签名的低级信息  </span><br><span class="line">    docker trust key		#管理登入Docker镜像的keys  </span><br><span class="line">    	docker trust key generate	#生成并加载签名密钥对  </span><br><span class="line">		docker trust key load		#加载私钥文件以进行签名  </span><br><span class="line">    docker trust revoke		#删除对镜像的认证  </span><br><span class="line">    docker trust sign		#镜像签名  </span><br><span class="line">    docker trust signer		#管理可以登录Docker镜像的实体  </span><br><span class="line">    	docker trust signer add		#新增一个签名者  </span><br><span class="line">		docker trust signer remove	#删除一个签名者  </span><br><span class="line">docker unpause	#恢复容器中所有的进程  </span><br><span class="line">docker update	#更新一个或多个容器的配置  </span><br><span class="line">docker version	#显示 Docker 版本信息  </span><br><span class="line">docker volume	#管理volumes  </span><br><span class="line">    docker volume create	#创建一个卷  </span><br><span class="line">    docker volume inspect	#显示一个或多个卷的元数据  </span><br><span class="line">    docker volume ls		#列出卷  </span><br><span class="line">    docker volume prune		#删除所有未使用的卷  </span><br><span class="line">    docker volume rm		#删除一个或多个卷  </span><br><span class="line">docker wait		#阻塞运行直到容器停止，然后打印出它的退出代码</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>笔记</category>
      </categories>
      <tags>
        <tag>Linux命令</tag>
      </tags>
  </entry>
  <entry>
    <title>VMware Workstation Pro教程三：安装Debian</title>
    <url>/2023/10/18/VMware-Workstation-Pro%E6%95%99%E7%A8%8B%E4%B8%89%EF%BC%9A%E5%AE%89%E8%A3%85Debian/</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title>VMware Workstation Pro教程二：安装Ubuntu desktop</title>
    <url>/2023/10/18/VMware-Workstation-Pro%E6%95%99%E7%A8%8B%E4%BA%8C%EF%BC%9A%E5%AE%89%E8%A3%85Ubuntu-desktop/</url>
    <content><![CDATA[<h1>概述</h1>
<p>Ubuntu 是一种广受欢迎的开源操作系统，基于 Linux 内核。它以稳定性、易用性和强大的社区支持而闻名。本文介绍了在 VMware 虚拟机上的安装 Ubuntu 最新发布版本 <code>Ubuntu 22.04.1 LTS</code>，LTS 意为“长期支持”，一般为5年。该 LTS 版本将提供免费安全和维护更新至 2027年4月。有需要了解更多的，可以到 <a href="https://cn.ubuntu.com/desktop">Ubuntu官网</a> 了解。</p>
<h1>下载 Ubuntu22.04 镜像</h1>
<p>ubuntu22.04.2-desktop-amd64.iso：<a href="https://ubuntu.com/download/desktop">点击下载</a></p>
<p><img src="https://s2.loli.net/2023/10/18/rxYV1m792E6UteC.png" alt="ubuntu1"></p>
<h1>创建虚拟机</h1>
<h2 id="创建">创建</h2>
<p>打开 VMware 虚拟机—&gt;点击文件—&gt;新建虚拟机</p>
<p><img src="https://s2.loli.net/2023/10/18/27DAjitJpNmyogH.png" alt=""></p>
<h2 id="选择硬件兼容性">选择硬件兼容性</h2>
<p>默认点击下一步</p>
<p><img src="https://s2.loli.net/2023/10/18/BqOnIeKUYJcbR14.png" alt="ubuntu3"></p>
<h2 id="选择安装来源">选择安装来源</h2>
<p>选择 【稍后安装系统】，点击下一步</p>
<p><img src="https://s2.loli.net/2023/10/18/kchgDLiC6uH4qb3.png" alt="ubuntu4"></p>
<h2 id="选择系统类型">选择系统类型</h2>
<p>选择“Linux（L）”和“Ubuntu 64 位”，点击“下一步”。</p>
<p><img src="https://s2.loli.net/2023/10/18/9sG1BZIorSYQt6u.png" alt="ubuntu5"></p>
<h2 id="命名">命名</h2>
<p>自定义虚拟机名称和存储位置</p>
<p><img src="https://s2.loli.net/2023/10/18/j7hSnE4ogtMXFeW.png" alt="ubuntu6"></p>
<h2 id="一些配置"><strong>一些配置</strong></h2>
<h3 id="处理器配置"><strong>处理器配置</strong></h3>
<blockquote>
<p>处理器个数至少为 1 个，可根据自己需求进行选择。</p>
</blockquote>
<p><img src="https://s2.loli.net/2023/10/18/6rQzavlnm7psJCk.png" alt="ubuntu7"></p>
<h3 id="虚拟机内存配置"><strong>虚拟机内存配置</strong></h3>
<blockquote>
<p>根据自己物理机进行分配内存，最多不能大于物理机内存。</p>
</blockquote>
<p><img src="https://s2.loli.net/2023/10/18/SHwh5UOcavJ28WA.png" alt="ubuntu8"></p>
<h3 id="网络和-I-O-类型"><strong>网络和 I/O 类型</strong></h3>
<blockquote>
<p>我一般使用 NAT</p>
</blockquote>
<p><img src="https://s2.loli.net/2023/10/18/Ug2m8ceRzbn6IHk.png" alt="ubuntu9"></p>
<p><img src="https://s2.loli.net/2023/10/18/Pl8wKR37jWhGns2.png" alt="ubuntu10"></p>
<h3 id="磁盘类型"><strong>磁盘类型</strong></h3>
<p>默认即可</p>
<p><img src="https://s2.loli.net/2023/10/18/eM1aVPBt2x3ndyL.png" alt="ubuntu11"></p>
<h3 id="创建磁盘"><strong>创建磁盘</strong></h3>
<p><img src="https://s2.loli.net/2023/10/18/xRDXgr7KenjUAiS.png" alt="ubuntu12"></p>
<p><img src="https://s2.loli.net/2023/10/18/47OnxaTDygfPkoB.png" alt="ubuntu13"></p>
<h3 id="自定义硬件"><strong>自定义硬件</strong></h3>
<p>选择自己镜像的存储位置，然后点击“关闭”、“完成”</p>
<p><img src="https://s2.loli.net/2023/10/18/HaDsXojdl4OTwFE.png" alt="ubuntu14"></p>
<h2 id="启动虚拟机"><strong>启动虚拟机</strong></h2>
<p><img src="https://s2.loli.net/2023/10/18/Ot2PVc8k4N5UTvy.png" alt="ubuntu15"></p>
<p><img src="https://s2.loli.net/2023/10/18/zOBvtoyZmahl1kR.png" alt="ubuntu16"></p>
<blockquote>
<p>默认点击继续</p>
</blockquote>
<p><img src="https://s2.loli.net/2023/10/18/wnVtDr3myc7OG5j.png" alt="ubuntu17"></p>
<p><img src="https://s2.loli.net/2023/10/18/rMiWw7BEZXy32uj.png" alt="ubuntu18"></p>
<p><img src="https://s2.loli.net/2023/10/18/mtOxGeQCE1vM84d.png" alt="ubuntu19"></p>
<blockquote>
<p>选择时区</p>
</blockquote>
<p><img src="https://s2.loli.net/2023/10/18/Ab1KCi4cqxnm6Yh.png" alt="ubuntu20"></p>
<p><img src="https://s2.loli.net/2023/10/18/P2b5GEMLF8SWaTe.png" alt="ubuntu21"></p>
<p><img src="https://s2.loli.net/2023/10/18/jd5qbQIJcoTtWGY.png" alt="ubuntu22"></p>
<p><strong>完成安装</strong></p>
<h1>基础配置</h1>
<h2 id="更换国内源"><strong>更换国内源</strong></h2>
<p>打开&quot;软件和更新&quot;</p>
<p><img src="https://s2.loli.net/2023/10/18/5cUaWLibkqR9Z6e.png" alt="ubuntu23"></p>
<p>可自行百度选择，我这里选择的阿里云的。</p>
<h2 id="安装常用软件"><strong>安装常用软件</strong></h2>
<p><code>apt-get install curl wget lrzsz vim cron unzip screen</code></p>
<details class="toggle" ><summary class="toggle-button" style="">点击此处展开/收起内容，来自 chatgpt 的解释</summary><div class="toggle-content"><ol>
<li><code>curl</code>：用于在终端中进行网络请求和数据传输，支持各种协议（如 HTTP、HTTPS、FTP 等）。<br></li>
<li><code>wget</code>：用于从 Web 服务器下载文件，支持 HTTP、HTTPS 和 FTP 协议，具有断点续传功能。<br></li>
<li><code>lrzsz</code>：提供了 Xmodem、Ymodem 和 Zmodem 等协议的文件传输功能，用于通过终端与远程主机进行文件传输。<br></li>
<li><code>vim</code>：一种强大的文本编辑器，常用于命令行环境下编辑文本文件。<br></li>
<li><code>cron</code>：用于在预定时间自动运行命令或脚本的任务调度程序。<br></li>
<li><code>unzip</code>：用于解压缩 ZIP 格式的压缩文件。<br></li>
<li><code>screen</code>：用于在终端中创建和管理多个会话，允许在不同的终端窗口或会话之间切换。</li>
</ol>
</div></details>
<blockquote>
<p>更多请查看：待补充</p>
</blockquote>
<h2 id="其他"><strong>其他</strong></h2>
<ul>
<li>查看是否有网：ping <a href="http://baidu.com">baidu.com</a></li>
<li>查看 ip：ifconfig</li>
</ul>
<h1>美化（待补充）</h1>
]]></content>
      <categories>
        <category>笔记</category>
      </categories>
      <tags>
        <tag>VMware</tag>
        <tag>虚拟机</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2023/08/21/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<h2 id="Quick-Start">Quick Start</h2>
<h3 id="Create-a-new-post">Create a new post</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="Run-server">Run server</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="Generate-static-files">Generate static files</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="Deploy-to-remote-sites">Deploy to remote sites</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
]]></content>
  </entry>
  <entry>
    <title>VS Code配置</title>
    <url>/2023/10/19/VS-Code%E9%85%8D%E7%BD%AE/</url>
    <content><![CDATA[<div class="note orange icon-padding modern"><i class="note-icon fas fa-bullhorn"></i><p>简单记录一下我VS code的配置，不保证准确性</p>
</div>
<blockquote>
<p>vs 配置参考：</p>
<ul>
<li><a href="https://zhuanlan.zhihu.com/p/62913725">第一次使用VS Code时你应该知道的一切配置 - 知乎</a></li>
<li><a href="https://blog.csdn.net/wkd_007/article/details/131407330">【VSCode | 主题】推荐几个适合看 C/C++ 代码的 VSCode 主题-CSDN博客</a></li>
<li><a href="https://zhuanlan.zhihu.com/p/639196010">VSCode C/C++开发配置都在这里了 - 知乎</a></li>
</ul>
</blockquote>
<blockquote>
<p>首先先安装中文扩展：搜索 Chinese</p>
</blockquote>
<p><img src="https://s2.loli.net/2023/10/19/j4qMa23dbBrgl9n.png" alt="vs"></p>
<h1>配置 C/C++ 语言环境</h1>
<h2 id="安装-MinGW-w64">安装 MinGW-w64</h2>
<blockquote>
<p>C/C++的编译器有很多种，大家可自行选择，但网上大部分人都用的 MinGW-w64，故以此编译器为例</p>
</blockquote>
<blockquote>
<p>gcc 是 c/c++的编译器，但是通常在 Linux 上才能用。如果要在 windows 上用，我们要借助 MinGW 使用它。在 MinGW 官网上，可以下载 zip 也可以下载 exe 执行文件，但是 .exe 执行文件在安装时，其实是会根据你的选择去下载 zip ，而且网速不好根本下不下来，会报错，所以我们直接选择对应版本的 zip 文件下载就可以了。</p>
</blockquote>
<ol>
<li>
<p><strong>下载：</strong></p>
<p>链接 1： <a href="https://sourceforge.net/projects/mingw-w64/files/">MinGW-w64 - for 32 and 64 bit Windows - Browse Files at SourceForge.net</a><br>
链接 2： <a href="https://www.mingw-w64.org/downloads/">Downloads - MinGW-w64</a></p>
</li>
</ol>
<p><img src="https://s2.loli.net/2023/10/19/Eyc3IeCQi4AVUSK.png" alt="mingw64-1"></p>
<ul>
<li>X86_64 是指 64 位的操作系统，i686 是指 32 位的操作系统</li>
<li>Win32 是开发 windows 系统程序的协议，posix 是其他系统的协议（例如 Linux、Unix、Mac OS）</li>
<li>异常处理模型 seh（新的，仅支持 64 位系统），sjlj （稳定的，64 位和 32 位都支持），    dwarf （优于 sjlj 的，仅支持 32 位系统）</li>
</ul>
<ol start="2">
<li><strong>安装</strong></li>
</ol>
<p>方法一：在线安装（网络问题，很炸裂）</p>
<p><img src="https://s2.loli.net/2023/10/19/lRCv57reYGSXTPt.png" alt="mingw64-2"></p>
<ul>
<li>Version 是版本，一般选最高版本；</li>
<li>Architecture 是系统架构，电脑系统是 64 位的选择 x 86_64，是 32 位的则选择 i 686；</li>
<li>Threads 是操作系统接口协议，如果你想要开发 Windows 程序，需要选择 win 32 ，而开发</li>
<li>Linux、Unix、Mac OS 等其他操作系统下的程序，则需要选择 posix</li>
<li>Exception 是异常处理模型，推荐 seh (64 位系统)或 dwarf (32 位系统)</li>
<li>Build revision，默认值即可</li>
</ul>
<blockquote>
<p>注意安装目录需是纯英文的，且<strong>不含空格</strong></p>
</blockquote>
<p>方法二：直接下载对应的压缩包</p>
<p>下载后解压压缩包，右击“此电脑”——“属性”——“高级系统设置”——“环境变量”——找到“系统变量”中的“Path”条目——“编辑”——“新建”——将你的 MinGW-w64 安装路径复制到新条目中(格式形如 D:\mingw-w64\bin，一定要写到 bin 这个文件夹)——完成</p>
<p><img src="https://s2.loli.net/2023/10/19/29j8KkOGxb5mXzF.png" alt="mingw64-3"></p>
<p>打开命令提示符(直接在 Windows 搜索框输入 cmd 即可找到)，输入 gcc -v，然后回车，验证是否成功(如果出现十几行乱码一样的东西，则配置环境变量成功)(<strong>注意：gcc 与 -v 之间有一个空格！</strong>)</p>
<h2 id="设置-vscode-里的环境">设置 vscode 里的环境</h2>
<blockquote>
<p>配置文件有三个，分别为：①构建任务文件： tasks.json，②编译器路径文件： c_cpp_properties.json，③调试设置文件：launch.json         				    <strong><a href="//launch.xn--json-jb5ft8bp6l55dbx6a">//launch.json可以不创建</a></strong></p>
<p>可以按照下方教程手动配置，也可以直接复制我提供的文件（每个教程下面给出啊，注意更改路径）</p>
</blockquote>
<h3 id="配置-C-C-语言环境">配置 C/C++ 语言环境</h3>
<h4 id="配置-C-语言环境">配置 C 语言环境</h4>
<blockquote>
<p>参考：<a href="https://blog.csdn.net/incredibleimpact/article/details/109733494">VS Code C语言开发环境配置附图版保姆教程_blog.csdn.net/incredibleeimpact/article/details/10-CSDN博客</a><br>
<a href="https://www.cnblogs.com/xiaml/articles/17391759.html">VS Code配置C语言开发与调试环境(超详细) - Arthur古德曼 - 博客园</a></p>
</blockquote>
<ol>
<li><strong>安装必要扩展</strong></li>
</ol>
<ul>
<li>C/C++</li>
</ul>
<p><img src="https://s2.loli.net/2023/10/19/gQoljaBZ54xGi1T.png" alt="C1"></p>
<ul>
<li>其他扩展</li>
</ul>
<ol start="2">
<li><strong>配置</strong></li>
</ol>
<p>①新建项目仓库，比如  <code>C </code> 文件夹</p>
<p>②使用 vs code 打开 <code>C</code> 文件夹并在里面创建 Hello.c 文件</p>
<blockquote>
<p>PS：请注意路径不能有中文</p>
</blockquote>
<p>将以下代码填入 Hello. c 文件中，保存</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Hello, World!\n&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>③配置构建任务文件： tasks.json</p>
<p>按 F5，按图示选择第一个：</p>
<p><img src="https://s2.loli.net/2023/10/19/S9ZO3whatxWbe2d.png" alt="C-2"></p>
<p>④配置编译器路径文件： c_cpp_properties.json</p>
<ul>
<li>按快捷键 Ctrl+Shift+P 调出命令面板，输入 <code>C/C++</code>，选择“<code>Edit Configurations (UI)</code>”进入配置。</li>
<li>这里的路径根据大家自己安装的 Mingw 编译器位置和配置的环境变量位置所决定。</li>
</ul>
<blockquote>
<p>配置“编译器路径”(写自己的编译器下载路径，例如：<code>D:/mingw-w64/bin/gcc.exe</code> )以及“IntelliSense 模式”(设为：<code>gcc-x64</code>)</p>
</blockquote>
<p>然后会自动创建文件</p>
<p>⑤配置调试设置文件：launch.json</p>
<p>点击左边调试，点击创建 launch.json 文件</p>
<p><img src="https://s2.loli.net/2023/10/19/96fFJKNYtQ7l2Ma.png" alt="C-3"></p>
<p>选择 C++(GDB/LLDB)</p>
<p><img src="https://s2.loli.net/2023/10/19/PetL5coYx2WTpZC.png" alt="C-4"></p>
<p>紧接着会产生一个 launch.json 的文件，里面没什么东西，可以参考我的（后面会给出代码）</p>
<details class="toggle" ><summary class="toggle-button" style="">点击查看文件代码</summary><div class="toggle-content"><blockquote>
<p>此处为我的配置文件，可以直接复制粘贴，但不保证准确性</p>
</blockquote>
<p>tasks.json：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &quot;tasks&quot;: [</span><br><span class="line">        &#123;</span><br><span class="line">            &quot;type&quot;: &quot;cppbuild&quot;,</span><br><span class="line">            &quot;label&quot;: &quot;C/C++: gcc.exe 生成活动文件&quot;,</span><br><span class="line">            &quot;command&quot;: &quot;D:\\mingw-w64\\bin\\gcc.exe&quot;,     //换成你的路径</span><br><span class="line">            &quot;args&quot;: [</span><br><span class="line">                &quot;-fdiagnostics-color=always&quot;,</span><br><span class="line">                &quot;-g&quot;,</span><br><span class="line">                &quot;$&#123;file&#125;&quot;,</span><br><span class="line">                &quot;-o&quot;,</span><br><span class="line">                &quot;$&#123;fileDirname&#125;\\$&#123;fileBasenameNoExtension&#125;.exe&quot;</span><br><span class="line">            ],</span><br><span class="line">            &quot;options&quot;: &#123;</span><br><span class="line">                &quot;cwd&quot;: &quot;$&#123;fileDirname&#125;&quot;</span><br><span class="line">            &#125;,</span><br><span class="line">            &quot;problemMatcher&quot;: [</span><br><span class="line">                &quot;$gcc&quot;</span><br><span class="line">            ],</span><br><span class="line">            &quot;group&quot;: &#123;</span><br><span class="line">                &quot;kind&quot;: &quot;build&quot;,</span><br><span class="line">                &quot;isDefault&quot;: true</span><br><span class="line">            &#125;,</span><br><span class="line">            &quot;detail&quot;: &quot;调试器生成的任务。&quot;</span><br><span class="line">        &#125;</span><br><span class="line">    ],</span><br><span class="line">    &quot;version&quot;: &quot;2.0.0&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>c_cpp_properties.json：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &quot;configurations&quot;: [</span><br><span class="line">        &#123;</span><br><span class="line">            &quot;name&quot;: &quot;Win32&quot;,</span><br><span class="line">            &quot;includePath&quot;: [</span><br><span class="line">                &quot;$&#123;workspaceFolder&#125;/**&quot;</span><br><span class="line">            ],</span><br><span class="line">            &quot;defines&quot;: [</span><br><span class="line">                &quot;_DEBUG&quot;,</span><br><span class="line">                &quot;UNICODE&quot;,</span><br><span class="line">                &quot;_UNICODE&quot;</span><br><span class="line">            ],</span><br><span class="line">            &quot;compilerPath&quot;: &quot;D:\\mingw-w64\\bin\\gcc.exe&quot;,    //换成你的路径</span><br><span class="line">            &quot;cStandard&quot;: &quot;c17&quot;,</span><br><span class="line">            &quot;cppStandard&quot;: &quot;gnu++14&quot;,</span><br><span class="line">            &quot;intelliSenseMode&quot;: &quot;windows-gcc-x64&quot;</span><br><span class="line">        &#125;</span><br><span class="line">    ],</span><br><span class="line">    &quot;version&quot;: 4</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>launch.json：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    // 使用 IntelliSense 了解相关属性。 </span><br><span class="line">    // 悬停以查看现有属性的描述。</span><br><span class="line">    // 欲了解更多信息，请访问: https://go.microsoft.com/fwlink/?linkid=830387</span><br><span class="line">        &quot;version&quot;: &quot;0.2.0&quot;,</span><br><span class="line">        &quot;configurations&quot;: [</span><br><span class="line">          &#123;</span><br><span class="line">            &quot;name&quot;: &quot;C/C++ Debug&quot;,      // 配置名称，将会在启动配置的下拉菜单中显示</span><br><span class="line">            &quot;type&quot;: &quot;cppdbg&quot;,           // 配置类型，这里只能为cppdbg</span><br><span class="line">            &quot;request&quot;: &quot;launch&quot;,        // 请求配置类型，可以为launch（启动）或attach（附加）  </span><br><span class="line">            &quot;program&quot;: &quot;$&#123;fileDirname&#125;/$&#123;fileBasenameNoExtension&#125;.exe&quot;,          // 将要进行调试的程序的路径，详细见下方注释</span><br><span class="line">            &quot;args&quot;: [],                                               // 程序调试时传递给程序的命令行参数，一般设为空即可  </span><br><span class="line">            &quot;stopAtEntry&quot;: false,                                     // 设为true时程序将暂停在程序入口处，一般设置为false  </span><br><span class="line">            &quot;cwd&quot;: &quot;$&#123;fileDirname&#125;&quot;,          // 调试程序时的工作目录，详细见下方注释</span><br><span class="line">            &quot;environment&quot;: [],</span><br><span class="line">            &quot;externalConsole&quot;: false,        // 调试时是否显示控制台窗口，一般设置为false即在控制台显示，true则弹出终端</span><br><span class="line">            &quot;MIMode&quot;: &quot;gdb&quot;,                                          </span><br><span class="line">            &quot;miDebuggerPath&quot;: &quot;D:\\mingw-w64\\bin\\gdb.exe&quot;,   // miDebugger的路径，注意这里要与自己电脑安装的MinGw的路径对应</span><br><span class="line">            &quot;preLaunchTask&quot;: &quot;C/C++: gcc.exe 生成活动文件&quot;, // 调试会话开始前执行的任务，一般为编译程序，和tasks.json文件中的&quot;label&quot;一样</span><br><span class="line">            &quot;setupCommands&quot;: [</span><br><span class="line">              &#123;</span><br><span class="line">                &quot;description&quot;: &quot;Enable pretty-printing for gdb&quot;,</span><br><span class="line">                &quot;text&quot;: &quot;-enable-pretty-printing&quot;,</span><br><span class="line">                &quot;ignoreFailures&quot;: true</span><br><span class="line">              &#125;</span><br><span class="line">            ],</span><br><span class="line">          &#125;</span><br><span class="line">        ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>来自Chatgpt的解释：</p>
<p>一、program变量</p>
<ol>
<li><code>&quot;program&quot;: &quot;${workspaceFolder}/${fileBasenameNoExtension}.exe&quot;</code>：
<ul>
<li>始终使用 <code>${workspaceFolder}</code> 中的可执行文件。</li>
<li>适合在整个工作区内使用相同的可执行文件的情况。</li>
</ul>
</li>
<li><code>&quot;program&quot;: &quot;${fileDirname}/${fileBasenameNoExtension}.exe&quot;</code>：
<ul>
<li>自动使用当前活动文件所在文件夹中的可执行文件。</li>
<li>更适合在不同文件夹中编写代码并希望在当前文件夹中查找可执行文件的情况。</li>
</ul>
</li>
</ol>
<p>如果你的项目结构中不同文件夹中都有各自的可执行文件，使用 <code>&quot;program&quot;: &quot;${fileDirname}/${fileBasenameNoExtension}.exe&quot;</code> 更灵活，因为它会根据当前活动文件的位置自动查找相关的可执行文件，而不需要在不同文件夹中手动切换配置。</p>
<p>二、cwd变量</p>
<ul>
<li><code>&quot;cwd&quot;: &quot;${workspaceFolder}&quot;</code> 将工作目录设置为你的 VS Code 项目的根目录，即打开的文件夹的根目录。这通常是你的整个项目的根目录。当你需要在整个项目中执行或调试任务时，这是一个常见的设置。</li>
<li><code>&quot;cwd&quot;: &quot;${fileDirname}&quot;</code> 将工作目录设置为当前打开文件的目录。这对于执行或调试与当前打开文件直接相关的任务非常有用，例如，如果你需要在与当前文件相关的特定子目录中执行任务，可以使用 <code>${fileDirname}</code>。</li>
</ul>
<p>你可以根据具体需求选择使用哪个工作目录设置。如果你想要在整个项目中运行任务，通常使用 <code>&quot;workspaceFolder&quot;</code> 是一个好的选择。如果你只想针对当前打开的文件运行任务，那么使用 <code>&quot;fileDirname&quot;</code> 更合适。</p>
<p>使用 <code>${workspaceFolder}</code> 通常对于整个项目的任务非常有用，而 <code>${fileDirname}</code> 对于与单个文件关联的任务更合适。</p>
</div></details>
<hr>
<h4 id="配置-C-语言环境-2">配置 C++ 语言环境</h4>
<blockquote>
<p>和“<font color="#ff0000">配置 C 语言环境</font>”这一步基本一样，就几个地方有点区别，需要把一些地方出现的gcc换成g++</p>
</blockquote>
<blockquote>
<p>参考：</p>
<ul>
<li><a href="https://zhuanlan.zhihu.com/p/87864677">VSCode配置C/C++环境 - 知乎</a></li>
<li><a href="https://blog.csdn.net/weixin_44996090/article/details/104432593">【精选】vscode配置c/c++编译环境（最终解决办法）_未配置编译器。除非设置自己的配置,否则 intellisense 可能无法正常工作。-CSDN博客</a></li>
<li><a href="https://blog.csdn.net/qq_45807140/article/details/112862592">【精选】从零开始的vscode安装及环境配置教程(C/C++)(Windows系统)_从零开始的vscode安装及环境配置教程(c/c++)(windows系统)_vscode环境配置_-CSDN博客</a></li>
</ul>
</blockquote>
<ol>
<li><strong>安装必要扩展</strong></li>
</ol>
<ul>
<li>C/C++</li>
<li>其他扩展：</li>
</ul>
<ol start="2">
<li><strong>配置</strong></li>
</ol>
<p>①新建项目仓库，比如 CPP 文件夹<br>
②使用 vs code 打开 CPP 文件夹并在里面创建 Hello.cpp 文件</p>
<blockquote>
<p>PS：请注意路径不能有中文</p>
</blockquote>
<p>将以下代码填入 Hello.cpp 文件中，保存</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;windows.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Hello World\n&quot;</span>);</span><br><span class="line">    <span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>③配置构建任务文件： tasks.json</p>
<p>按 F5，按图示选择第一个：</p>
<p><img src="https://s2.loli.net/2023/10/19/Id4VPFJjlznZGUe.png" alt="CPP-1"></p>
<p>选择 g++</p>
<p><img src="https://s2.loli.net/2023/10/19/6pTlOh7y5i9mdXg.png" alt="CPP-2"></p>
<p>④配置编译器路径文件： c_cpp_properties.json</p>
<ul>
<li>按快捷键 Ctrl+Shift+P 调出命令面板，输入 <code>C/C++</code>，选择“<code>Edit Configurations(UI)</code>”进入配置。</li>
<li>这里的路径根据大家自己安装的 Mingw 编译器位置和配置的环境变量位置所决定。</li>
</ul>
<blockquote>
<p>配置“编译器路径”(写自己的编译器下载路径，例如：<code>D:/mingw-w64/bin/g++.exe</code>)以及“IntelliSense 模式”(设为：<code>gcc-x64</code>)</p>
</blockquote>
<p>⑤配置调试设置文件：launch.json<br>
参考上面 “<code>配置 C 语言环境</code>” 部分</p>
<details class="toggle" ><summary class="toggle-button" style="">点击查看文件代码</summary><div class="toggle-content"><blockquote>
<p>此处为我的配置文件，可以直接复制粘贴，但不保证准确性</p>
</blockquote>
<p>tasks.json：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &quot;tasks&quot;: [</span><br><span class="line">        &#123;</span><br><span class="line">            &quot;type&quot;: &quot;cppbuild&quot;,</span><br><span class="line">            &quot;label&quot;: &quot;C/C++: g++.exe 生成活动文件&quot;, </span><br><span class="line">            &quot;command&quot;: &quot;D:\\mingw-w64\\bin\\g++.exe&quot;,         //换成你的路径</span><br><span class="line">            &quot;args&quot;: [</span><br><span class="line">                &quot;-fdiagnostics-color=always&quot;,</span><br><span class="line">                &quot;-g&quot;,</span><br><span class="line">                &quot;$&#123;file&#125;&quot;,</span><br><span class="line">                &quot;-o&quot;,</span><br><span class="line">                &quot;$&#123;fileDirname&#125;\\$&#123;fileBasenameNoExtension&#125;.exe&quot;</span><br><span class="line">            ],</span><br><span class="line">            &quot;options&quot;: &#123;</span><br><span class="line">                &quot;cwd&quot;: &quot;$&#123;fileDirname&#125;&quot;</span><br><span class="line">            &#125;,</span><br><span class="line">            &quot;problemMatcher&quot;: [</span><br><span class="line">                &quot;$gcc&quot;</span><br><span class="line">            ],</span><br><span class="line">            &quot;group&quot;: &quot;build&quot;,</span><br><span class="line">            &quot;detail&quot;: &quot;编译器: D:\\mingw-w64\\bin\\g++.exe&quot;      //换成你的路径</span><br><span class="line">        &#125;</span><br><span class="line">    ],</span><br><span class="line">    &quot;version&quot;: &quot;2.0.0&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>c_cpp_properties.json：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &quot;configurations&quot;: [</span><br><span class="line">        &#123;</span><br><span class="line">            &quot;name&quot;: &quot;Win32&quot;,</span><br><span class="line">            &quot;includePath&quot;: [</span><br><span class="line">                &quot;$&#123;workspaceFolder&#125;/**&quot;</span><br><span class="line">            ],</span><br><span class="line">            &quot;defines&quot;: [</span><br><span class="line">                &quot;_DEBUG&quot;,</span><br><span class="line">                &quot;UNICODE&quot;,</span><br><span class="line">                &quot;_UNICODE&quot;</span><br><span class="line">            ],</span><br><span class="line">            &quot;compilerPath&quot;: &quot;D:/mingw-w64/bin/g++.exe&quot;,           //换成你的路径</span><br><span class="line">            &quot;cStandard&quot;: &quot;c17&quot;,</span><br><span class="line">            &quot;cppStandard&quot;: &quot;gnu++14&quot;,</span><br><span class="line">            &quot;intelliSenseMode&quot;: &quot;windows-gcc-x64&quot;</span><br><span class="line">        &#125;</span><br><span class="line">    ],</span><br><span class="line">    &quot;version&quot;: 4</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>launch.json：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    // 使用 IntelliSense 了解相关属性。 </span><br><span class="line">    // 悬停以查看现有属性的描述。</span><br><span class="line">    // 欲了解更多信息，请访问: https://go.microsoft.com/fwlink/?linkid=830387</span><br><span class="line">        &quot;version&quot;: &quot;0.2.0&quot;,</span><br><span class="line">        &quot;configurations&quot;: [</span><br><span class="line">          &#123;</span><br><span class="line">            &quot;name&quot;: &quot;C/C++ Debug&quot;,      // 配置名称，将会在启动配置的下拉菜单中显示</span><br><span class="line">            &quot;type&quot;: &quot;cppdbg&quot;,           // 配置类型，这里只能为cppdbg</span><br><span class="line">            &quot;request&quot;: &quot;launch&quot;,        // 请求配置类型，可以为launch（启动）或attach（附加）  </span><br><span class="line">            &quot;program&quot;: &quot;$&#123;fileDirname&#125;/$&#123;fileBasenameNoExtension&#125;.exe&quot;,          // 将要进行调试的程序的路径，详细见下方注释</span><br><span class="line">            &quot;args&quot;: [],                                               // 程序调试时传递给程序的命令行参数，一般设为空即可  </span><br><span class="line">            &quot;stopAtEntry&quot;: false,                                     // 设为true时程序将暂停在程序入口处，一般设置为false  </span><br><span class="line">            &quot;cwd&quot;: &quot;$&#123;fileDirname&#125;&quot;,                              // 调试程序时的工作目录，详细见下方注释</span><br><span class="line">            &quot;environment&quot;: [],</span><br><span class="line">            &quot;externalConsole&quot;: false,                             // 调试时是否显示控制台窗口，一般设置为false即在控制台显示，true则弹出终端</span><br><span class="line">            &quot;MIMode&quot;: &quot;gdb&quot;,                                          </span><br><span class="line">            &quot;miDebuggerPath&quot;: &quot;D:\\mingw-w64\\bin\\gdb.exe&quot;,   // miDebugger的路径，注意这里要与自己电脑安装的MinGw的路径对应</span><br><span class="line">            &quot;preLaunchTask&quot;: &quot;C/C++: g++.exe 生成活动文件&quot;, // 调试会话开始前执行的任务，一般为编译程序，和tasks.json文件中的&quot;label&quot;一样</span><br><span class="line">            &quot;setupCommands&quot;: [</span><br><span class="line">              &#123;</span><br><span class="line">                &quot;description&quot;: &quot;Enable pretty-printing for gdb&quot;,</span><br><span class="line">                &quot;text&quot;: &quot;-enable-pretty-printing&quot;,</span><br><span class="line">                &quot;ignoreFailures&quot;: true</span><br><span class="line">              &#125;</span><br><span class="line">            ],</span><br><span class="line">          &#125;</span><br><span class="line">        ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>&quot;program&quot;和&quot;cwd&quot;的注释请参考上方“配置 C 语言环境” 这一步骤</p>
</div></details>
<h4 id="参考">参考</h4>
<ul>
<li><a href="https://www.52pojie.cn/thread-1725753-1-1.html">C/C++编译器 离线安装包、便携版 有TDM-GCC MinGW-GCC Clang等 - 『精品软件区』 - 吾爱破解 - LCG - LSG |安卓破解|病毒分析|www.52pojie.cn</a></li>
<li><a href="https://www.cnblogs.com/ggg-327931457/p/9694516.html">MinGW-w64安装教程——著名C/C++编译器GCC的Windows版本 - 『潇洒の背影』 - 博客园</a></li>
<li><a href="https://zhuanlan.zhihu.com/p/180438950">VScode安装配置C语言运行环境（踩坑贴） - 知乎</a></li>
<li><a href="https://blog.csdn.net/B11050729/article/details/132176767">MinGW-W64 下载、安装与配置（支持最新版的GCC，目前 GCC 13.2.0）_mingw 最新-CSDN博客</a></li>
<li><a href="https://zhuanlan.zhihu.com/p/354400717">VS Code配置C语言开发环境的超详细教程 - 知乎</a></li>
<li><a href="https://blog.csdn.net/qq_45807140/article/details/112862592">【精选】从零开始的vscode安装及环境配置教程(C/C++)(Windows系统)_从零开始的vscode安装及环境配置教程(c/c++)(windows系统)_vscode环境配置_-CSDN博客</a></li>
</ul>
]]></content>
      <categories>
        <category>笔记</category>
      </categories>
      <tags>
        <tag>vs</tag>
      </tags>
  </entry>
  <entry>
    <title>windows 安装Git</title>
    <url>/2023/10/17/%E5%AE%89%E8%A3%85Git/</url>
    <content><![CDATA[<h1>一、windows 安装</h1>
<h2 id="官网下载安装包：-Git-Downloading-Package"><strong>官网下载安装包：</strong> <a href="https://git-scm.com/download/win">Git - Downloading Package</a></h2>
<p><img src="https://s2.loli.net/2023/10/17/DjJWMXn13P9l2RE.png" alt="git1"></p>
<h2 id="安装："><strong>安装：</strong></h2>
<h3 id="选择-Git-的安装路径：">选择 Git 的安装路径：</h3>
<p><img src="https://s2.loli.net/2023/10/17/2ZBUPXa5YyQJFnI.png" alt="git2"></p>
<h3 id="选择安装组件">选择安装组件</h3>
<p><img src="https://s2.loli.net/2023/10/17/zHNxmc1utWTp5XU.png" alt="git3"></p>
<ul>
<li>Additional Icons、On the Desktop  添加桌面图标推荐选择推荐选择</li>
<li>Windows Explorer integration、Git Bash Here、Git GUI Here<br>
可以右键选择使用 Git Bash 和 Git GUI 两种方式的客户端</li>
<li>Git LFS （Large File Support） 大文件支持，推荐勾选</li>
<li>Associate .git* configuration files with the default text editor 关联.git 后缀文件，推荐勾选</li>
<li>Associate .sh files to be run with Bash 关联<code>.sh</code> 文件，推荐勾选</li>
<li>Check daily for Git for Windows updates 每天检查版本更新，不推荐勾选</li>
<li>(NEW!) Add a Git Bash Profile to Windows Terminal 将 Git Bash 添加到 Windows Terminal 中推荐勾</li>
<li>(NEW!)Scalar (Git add-on to manage large-scale repositories) Windows 新开发的一种大规模仓库管理，视情况而定</li>
</ul>
<h3 id="创建菜单文件夹">创建菜单文件夹</h3>
<p><img src="https://s2.loli.net/2023/10/17/t3WmPdphzZNI5Ej.png" alt="git4"></p>
<blockquote>
<p>在开始菜单栏创建 Git 文件夹，可以修改“Git”来重新命名文件夹，也可以点击“Browser”添加到别的已有文件夹，也可以勾选“Don’t create a Start Menu folder”来选择不创建文件夹</p>
</blockquote>
<h3 id="选择-Git-默认编辑器">选择 Git 默认编辑器</h3>
<p>Git 安装程序里面内置了10种编辑器供你挑选，比如 Atom、Notepad、Notepad++、Sublime Text、Visual Studio Code、Vim 等等，默认的是 Vim ，选择 Vim 后可以直接进行到下一步，但是 Vim 是纯命令行，操作有点难度，需要学习。如果选其他编辑器，则还需要去其官网安装后才能进行下一步。</p>
<blockquote>
<p>本教程选择 Vim 编辑器</p>
</blockquote>
<p><img src="https://s2.loli.net/2023/10/17/3x4BvnjOhM5iyL2.png" alt="git5"></p>
<h3 id="决定初始化新项目（仓库）的主干名字">决定初始化新项目（仓库）的主干名字</h3>
<p><img src="https://s2.loli.net/2023/10/17/WxCkX2EUd3TpcDZ.png" alt="git6"></p>
<blockquote>
<p>注： 第二个选项下面有个 NEW！ ，说很多团队已经重命名他们的默认主干名为 main . 这是因为2020 年非裔男子乔治·弗洛伊德因白人警察暴力执法惨死而掀起的 Black Lives Matter(黑人的命也是命)运动，很多人认为 master 不尊重黑人，呼吁改为 main.</p>
</blockquote>
<h3 id="调整你的-path-环境变量">调整你的 path 环境变量</h3>
<ul>
<li>
<p>第一种是仅从 Git Bash 使用 Git。这个的意思就是你只能通过 Git 安装后的 Git Bash 来使用 Git ，其他的什么命令提示符啊等第三方软件都不行。</p>
</li>
<li>
<p>第二种是从命令行以及第三方软件进行 Git。这个就是在第一种基础上进行第三方支持，你将能够从 Git Bash，命令提示符 (cmd) 和 Windows PowerShell 以及可以从 Windows 系统环境变量中寻找 Git 的任何第三方软件中使用 Git。推荐使用这个。</p>
</li>
<li>
<p>第三种是从命令提示符使用 Git 和可选的 Unix 工具。选择这种将覆盖 Windows 工具，如 “ find 和 sort ”。只有在了解其含义后才使用此选项。一句话，适合比较懂的人折腾。</p>
</li>
</ul>
<p><img src="https://s2.loli.net/2023/10/17/gU4oXG6DnwvVj1P.png" alt="git7"></p>
<details class="toggle" ><summary class="toggle-button" style="">点击查看相关解释</summary><div class="toggle-content"><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">翻译如下：</span><br><span class="line"></span><br><span class="line">Use Git from Git Bash only </span><br><span class="line">This is the most cautious choice as your PATH will not be modified at all. You w only be able to use the Git command line tools from Git Bash.</span><br><span class="line">仅从 Git Bash 使用 Git</span><br><span class="line">这是最谨慎的选择，因为您的 PATH 根本不会被修改。您将只能使用 Git Bash 中的 Git 命令行工具。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Git from the command line and also from 3 rd-party software</span><br><span class="line">(Recommended) This option adds only some minimal Git wrappers to your PATH to avoid cluttering your environment with optional Unix tools.</span><br><span class="line">You will be able to use Git from Git Bash，the Command Prompt and the Windov PowerShell as well as any third-party software looking for Git in PATH.</span><br><span class="line">从命令行以及第三方软件进行 Git</span><br><span class="line">（推荐）此选项仅将一些最小的 Git 包装器添加到 PATH 中，以避免使用可选的 Unix 工具使环境混乱。</span><br><span class="line">您将能够使用 Git Bash 中的 Git，命令提示符和 Windov PowerShell 以及在 PATH 中寻找 Git 的任何第三方软件。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Use Git and optional Unix tools from the Command Prompt </span><br><span class="line">Both Git and the optional Unix tools will be added to your PATH.</span><br><span class="line">Warning: This will override Windows tools like &quot;find&quot;and &quot;sort&quot;. Only use this option if you understand the implications.</span><br><span class="line">使用命令提示符中的 Git 和可选的 Unix 工具</span><br><span class="line">Git 和可选的 Unix 工具都将添加到您的 PATH 中。</span><br><span class="line">警告：这将覆盖 Windows 工具，例如 &quot;find&quot; and &quot;sort&quot;. 仅在了解其含义后使用此选项。</span><br></pre></td></tr></table></figure>
</div></details>
<h3 id="选择-SSH-执行文件">选择 SSH 执行文件</h3>
<blockquote>
<p>勾选默认即可</p>
</blockquote>
<p><img src="https://s2.loli.net/2023/10/17/m4Ef3wodubW52FJ.png" alt="git8"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Use bundled OpenSSH </span><br><span class="line">This uses ssh. Exe that comes with Git.</span><br><span class="line">使用捆绑的 OpenSSH</span><br><span class="line">这使用的 ssh. Exe 是 Git 自带的 </span><br><span class="line"></span><br><span class="line">Use external OpenSSH </span><br><span class="line">NEW! This uses an external ssh. Exe. Git will not install its own OpenSSH</span><br><span class="line">(and related) binaries but use them as found on the PATH.</span><br><span class="line">使用外部 OpenSSH</span><br><span class="line">新！这使用外部 ssh. Exe 文件。 </span><br><span class="line">Git 不会安装自己的 OpenSSH（和相关）二进制文件，而是使用在环境变量 PATH 中找到的它们。</span><br></pre></td></tr></table></figure>
<h3 id="选择-HTTPS-后端传输">选择 HTTPS 后端传输</h3>
<p><img src="https://s2.loli.net/2023/10/17/tk6W7EwBq4jxQGI.png" alt="git9"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">翻译如下：</span><br><span class="line"></span><br><span class="line">use the OpenSSL library </span><br><span class="line">Server certificates will be validated using the ca-bundle. crt file.</span><br><span class="line">使用 OpenSSL 库</span><br><span class="line">服务器证书将使用 ca-bundle.crt 文件进行验证。</span><br><span class="line">	</span><br><span class="line">Use the native Windows Secure Channel library </span><br><span class="line">Server certificates will be validated using Windows Certificate Stores.</span><br><span class="line">This option also allows you to use your company&#x27;s internal Root CA certificates distributed e.g. via Active Directory Domain Services.</span><br><span class="line">使用本机 Windows 安全通道库</span><br><span class="line">服务器证书将使用 Windows 证书存储进行验证。</span><br><span class="line">此选项还允许您使用公司内部分发的内部根 CA 证书，例如通过 Active Directory 域服务。</span><br></pre></td></tr></table></figure>
<p>这两种选项有什么区别：<br>
来自：<a href="https://stackoverflow.com/questions/62456484/whats-the-difference-between-openssl-and-the-native-windows-secure-channel-libr">https://stackoverflow.com/questions/62456484/whats-the-difference-between-openssl-and-the-native-windows-secure-channel-libr</a></p>
<blockquote>
<p>如果在具有企业管理证书的组织中使用 Git，则将需要使用安全通道。如果你仅使用 Git 来访问公共存储库（例如 GitHub ），或者你的组织不管理自己的证书，那么使用 SSL 后端（它们只是同一协议的不同实现）就可以了。</p>
</blockquote>
<p>也就是说，作为普通用户，只是用 Git 来访问 Github、GitLab 等网站，选择前者就行了。</p>
<h3 id="配置行尾符号转换">配置行尾符号转换</h3>
<p><img src="https://s2.loli.net/2023/10/17/kXEIPRAartxVjDn.png" alt="git10"></p>
<details class="toggle" ><summary class="toggle-button" style="">点击查看相关解释</summary><div class="toggle-content"><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Checkout Windows-style, commit Unix-style line endings </span><br><span class="line">Git will convert LF to CRLF when checking out text files. </span><br><span class="line">When committing text files, CRLF will be converted to LF. For cross-platform projects, this is the recommended setting on Windows(&quot;core. autocrif&quot;is set to &quot;true&quot;).</span><br><span class="line">签出 Windows 样式，提交 Unix 样式的行结尾</span><br><span class="line">Git 签出文本文件时，会将 LF 转换为 CRLF。</span><br><span class="line">提交文本文件时，CRLF 将转换为 LF。</span><br><span class="line">对于跨平台项目，这是 Windows 上的建议设置（&quot;core.autocrif&quot; 设置为 &quot;true&quot;）。</span><br><span class="line"></span><br><span class="line">Checkout as-is, commit Unix-style line endings </span><br><span class="line">Git will not perform any conversion when checking out text files. </span><br><span class="line">When committing text files, CRLF will be converted to LF. For cross-platform projects, this is the recommended setting on Unix(&quot;core.autocrif&quot; is set to &quot;input&quot;).</span><br><span class="line">按原样签出，提交 Unix 样式的行结尾</span><br><span class="line">Git 在签出文本文件时不会执行任何转换。提交文本文件时，CRLF 将转换为 LF。</span><br><span class="line">对于跨平台项目，这是在 Unix 上的建议设置（&quot;core.autocrif&quot; 设置为 &quot;input&quot;）。</span><br><span class="line"></span><br><span class="line">Checkout as-is, commit as-is </span><br><span class="line">Git will not perform any conversions when checking out or committing text files. </span><br><span class="line">Choosing this option is not recommended for cross-platform projects(&quot;core. autocrif&quot;is set to &quot;false&quot;).</span><br><span class="line">按原样签出，按原样提交</span><br><span class="line">Git 在签出或提交文本文件时不会执行任何转换。</span><br><span class="line">不建议跨平台项目选择此选项（&quot;core.autocrif&quot; 设置为 &quot;false&quot;）。</span><br></pre></td></tr></table></figure>
<blockquote>
<p><strong>这三种选择分别是：</strong><br>
<code>签出 Windows 样式，提交 Unix 样式的行结尾。</code><br>
<code>按原样签出，提交Unix样式的行结尾。</code><br>
<code>按原样签出，按原样提交。</code></p>
</blockquote>
<p><strong>更多：</strong></p>
<p>那 Windows 样式和 Unix 样式到底有什么区别呢？引用《<a href="https://book.douban.com/subject/26462816/">GitHub入门与实践</a>》第 50 页内容</p>
<blockquote>
<p>GitHub 中公开的代码大部分都是以 Mac 或 Linux 中的 LF（Line Feed）换行。然而，由于 Windows 中是以 CRLF（Carriage Return+ Line Feed）换行的，所以在非对应的编辑器中将不能正常显示。<br>
Git 可以通过设置自动转换这些换行符。使用 Windows 环境的各位，请选择推荐的 “Checkout Windows-style，commit Unix-style line endings” 选项。换行符在签出时会自动转换为 CRLF，在提交时则会自动转换为 LF .</p>
</blockquote>
<p>上面说 Mac 、Linux、Unix 的 Line Feed ，翻译过来就是换行符，用 “\n” 表示，换行符 “\n” 的 ASCII 值为 10；<br>
Windows 的是 Carriage Return+ Line Feed（回车+换行），用 “\r\n” 表示，回车符 “\r” 的 ASCII 值为 13；<br>
这上下两者是不一样的。<br>
所以这就需要转换了，至于为什么选第一项？<br>
这还用问吗？<strong><code>我们现在的教程就是介绍怎么安装 Windows 版 Git，肯定选第一项啦。</code></strong><br>
至于 “回车”（carriage return）和 “换行”（line feed）这两个概念的来历和区别？<br>
引用一下阮一峰老师博客的部分内容</p>
<blockquote>
<p>在计算机还没有出现之前，有一种叫做电传打字机（Teletype Model 33）的玩意，每秒钟可以打 10 个字符。但是它有一个问题，就是打字机打完一行换行的时候，要用去 0.2 秒，正好可以打两个字符。要是在这 0.2 秒里面，又有新的字符传过来，那么这个字符将丢失。于是，研制人员想了个办法解决这个问题，就是在每行后面加两个表示结束的字符。一个叫做&quot;回车&quot;，告诉打字机把打印头定位在左边界；另一个叫做&quot;换行&quot;，告诉打字机把纸向下移一行。</p>
</blockquote>
<p>更多资料参考：<br>
腾讯云 - 换行符‘\n’和回车符‘\r’的区别？[ <a href="https://cloud.tencent.com/developer/article/1353286">https://cloud.tencent.com/developer/article/1353286</a> ]<br>
知乎 - 为什么会用\r\n 两个字符表示换行？[ <a href="https://www.zhihu.com/question/29326647">https://www.zhihu.com/question/29326647</a> ]<br>
Stackoverflow - What are carriage return, linefeed, and form feed?[ <a href="https://stackoverflow.com/questions/3091524/what-are-carriage-return-linefeed-and-form-feed">https://stackoverflow.com/questions/3091524/what-are-carriage-return-linefeed-and-form-feed</a> ]<br>
点击 next 到下一步。</p>
</div></details>
<h3 id="配置终端模拟器以与-Git-Bash-一起使用">配置终端模拟器以与 Git Bash 一起使用</h3>
<p><img src="https://s2.loli.net/2023/10/17/UklpJIEjFADdvB3.png" alt="git11"></p>
<ul>
<li>
<p>建议选择第一种，MinTTY 3功能比 cmd 多，cmd 只不过比 MinTTY 更适合处理 Windows 的一些接口问题，这个对 Git 用处不大，除此之外 Windows 的默认控制台窗口（cmd）有很多劣势，比如 cmd 具有非常有限的默认历史记录回滚堆栈和糟糕的字体编码等等。</p>
</li>
<li>
<p>相比之下，MinTTY 具有可调整大小的窗口和其他有用的可配置选项，可以通过右键单击的工具栏来打开它们 git-bash 。点击next到下一步。建议选择第一种，MinTTY 3 功能比 cmd 多，cmd 只不过比 MinTTY 更适合处理 Windows 的一些接口问题，这个对 Git 用处不大，除此之外 Windows 的默认控制台窗口（cmd）有很多劣势，比如 cmd 具有非常有限的默认历史记录回滚堆栈和糟糕的字体编码等等。</p>
</li>
<li>
<p>相比之下，MinTTY 具有可调整大小的窗口和其他有用的可配置选项，可以通过右键单击的工具栏来打开它们 git-bash 。点击 next 到下一步。</p>
</li>
</ul>
<h3 id="选择默认的-“git-pull”-行为">选择默认的 “git pull” 行为</h3>
<p><img src="https://s2.loli.net/2023/10/17/GpkX2tyoJcSKIvw.png" alt="git12"></p>
<ul>
<li>Git pull 就是获取最新的远程仓库分支到本地，并与本地分支合并<br>
上面给了三个 “git pull” 的行为：</li>
</ul>
<ol>
<li>第一个是 merge</li>
<li>第二个是 rebase</li>
<li>第三个是直接获取</li>
</ol>
<ul>
<li>第一种 git pull = git fetch + git merge<br>
第二种 git pull = git fetch + git rebase<br>
第三种 git pull = git fetch ？(这个没试过，纯属猜测)</li>
</ul>
<p>一般默认选择第一项，git rebase 绝大部分程序员都用不好或者不懂，而且风险很大，但是很多会用的人也很推崇，但是用不好就是灾难。<br>
Git pull 只是拉取远程分支并与本地分支合并，而 git fetch 只是拉取远程分支，怎么合并，选择 merge 还是 rebase ，可以再做选择。</p>
<details class="toggle" ><summary class="toggle-button" style="">点击查看更多参考资料</summary><div class="toggle-content"><ul>
<li>知乎 - git pull 和 git fetch 的区别？ [ <a href="https://www.zhihu.com/question/38305012">https://www.zhihu.com/question/38305012</a> ]</li>
<li>知乎 - 在开发过程中使用 git rebase 还是 git merge，优缺点分别是什么？ [ <a href="https://www.zhihu.com/question/36509119">https://www.zhihu.com/question/36509119</a> ]</li>
<li>Stackoverflow - Why does git perform fast-forward merges by default? [ <a href="https://stackoverflow.com/questions/2850369">https://stackoverflow.com/questions/2850369</a> ]</li>
<li>Stackoverflow - In git how is fetch different than pull and how is merge different than rebase? [ <a href="https://stackoverflow.com/questions/14894768/">https://stackoverflow.com/questions/14894768/</a> ]</li>
<li>Stackoverflow - Difference between git pull and git pull --rebase [ <a href="https://stackoverflow.com/questions/18930527">https://stackoverflow.com/questions/18930527</a> ]</li>
</ul>
</div></details>
<h3 id="选择一个凭证帮助程序">选择一个凭证帮助程序</h3>
<p><img src="https://s2.loli.net/2023/10/17/jN8I9M6PdZBzkfy.png" alt="git13"></p>
<p><strong>一共两个选项：</strong><br>
<code>Git 凭证管理</code><br>
<code>不使用凭证助手</code><br>
第一个选项是提供<code>登录凭证</code>帮助的，Git 有时需要用户的凭据才能执行操作；例如，可能需要输入<code>用户名</code>和<code>密码</code>才能通过 HTTP 访问远程存储库（GitHub，GItLab 等等）。</p>
<h3 id="配置额外的选项">配置额外的选项</h3>
<p><img src="https://s2.loli.net/2023/10/17/HUmE8klwQ1ZOGnf.png" alt="git14"></p>
<p><strong>有两个选项：</strong><br>
<code>启用文件系统缓存 </code> 和 <code>启用符号链接</code><br>
启用文件系统缓存就是将批量读取文件系统数据并将其缓存在内存中以进行某些操作，可以显著提升性能。这个选项默认开启。</p>
<p>启用符号链接，符号链接是一类特殊的文件，其包含有一条以绝对路径或者相对路径的形式指向其它文件或者目录的引用，类似于 Windows 的快捷方式，不完全等同类Unix（如 Linux的符号链接。因为该功能的支持需要一些条件，所以默认不开启。</p>
<h3 id="配置实验性选项">配置实验性选项</h3>
<p><img src="https://s2.loli.net/2023/10/17/TBWMKZHyvcnz1qm.png" alt="git15"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Enable experimental support for pseudo consoles.</span><br><span class="line">(NEW!) This allows running native console programs like Node or Python in a Git Bash window without using winpty, </span><br><span class="line">but it still has known bugs.</span><br><span class="line">启用对伪控制台的实验性支持。</span><br><span class="line">(新功能!) 这允许在不使用 winpty 的情况下在 Git Bash 窗口中运行诸如 Node 或 Python 之类的本机控制台程序，</span><br><span class="line">但是它仍然存在已知的 bug。</span><br><span class="line"></span><br><span class="line">Enable experimental built-in file system monitor</span><br><span class="line">(NEW!) Automatically run a built-in file system watcher, to speed up common operations such as &#x27; git status&#x27;, &#x27; git add&#x27;, &#x27; git commit&#x27;, etc in worktrees containing many files.</span><br><span class="line">启用实验性内置文件系统监视器</span><br><span class="line">（新！）自动运行内置文件系统监视器，以加快包含许多文件的工作树中的常见操作，例如 &#x27;git status&#x27;、&#x27;git add&#x27;、&#x27;git commit&#x27; 等.</span><br></pre></td></tr></table></figure>
<blockquote>
<p>这是实验性功能，可能会有一些小错误之类的，建议不用开启。<br>
点击 install 进行安装。</p>
</blockquote>
<h3 id="测试安装">测试安装</h3>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 查看Git版本</span><br><span class="line">git version</span><br><span class="line"></span><br><span class="line"># 查看Git路径</span><br><span class="line">where git</span><br></pre></td></tr></table></figure>
<hr>
<h1>二、将 git 与 GitHub 账号绑定</h1>
<ol>
<li>
<p>使用邮箱注册 <a href="https://github.com/">GitHub</a> 账户，选择免费账户（Free），并完成邮件验证。<br>
桌面鼠标右键 -&gt; 打开Git Bash Here</p>
</li>
<li>
<p><strong>设置用户名和邮箱：</strong></p>
</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 配置用户名和邮箱</span><br><span class="line">git config --global user.name &quot;github 用户名&quot;</span><br><span class="line">git config --global user.email &quot;github 注册邮箱&quot;</span><br></pre></td></tr></table></figure>
<ol start="3">
<li><strong>创建 SSH 密匙</strong>：</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#生成 ssh 密钥,输入下方命令，然后一路回车。</span><br><span class="line">ssh-keygen -t rsa -C &quot;github 注册邮箱&quot;</span><br></pre></td></tr></table></figure>
<ol start="4">
<li><strong>添加密匙：</strong></li>
</ol>
<ul>
<li>
<p>一般执行上述命令之后，会生成 <code>id_rsa</code> 和 <code>id_rsa.pub</code> 两个文件，前者是我们私有的，而后者则是对外开放的。</p>
</li>
<li>
<p>接着找到生成的 <code>.ssh</code> 的文件夹中的 id_rsa.pub 密钥。</p>
</li>
<li>
<p>进入 C:\Users\用户名.ssh 目录（要勾选显示“隐藏的项目”），用记事本打开公钥 id_rsa.pub 文件并复制里面的内容。</p>
</li>
<li>
<p>登陆 GitHub ，进入 Settings 页面，选择左边栏的 SSH and GPG keys，点击 New SSH key。<br>
即：<a href="https://github.com/settings/keys">Sign in to GitHub · GitHub</a></p>
</li>
<li>
<p>选择 new ssh keys，创建一个新的 SSH key，填写 <code>Title</code> 和 <code>Key</code>。 <code>Title</code> 可以随意，而 <code>Key</code> 的内容则是我们刚才复制的 <code>id_rsa.pub</code> 中的内容，最后点击 <code>Add SSH key</code> 即可。</p>
</li>
</ul>
<ol start="5">
<li><strong>验证连接：</strong></li>
</ol>
<p>打开 Git Bash，输入 <code>ssh -T git@github.com</code> 出现 “Are you sure……”，输入 yes 回车确认。<br>
显示 “Hi xxx! You’ve successfully……” 即连接成功。</p>
<hr>
<h1>三、<strong>参考文档</strong></h1>
<ul>
<li><a href="https://zhuanlan.zhihu.com/p/607970211">Git安装全教程（Win11） - 知乎</a></li>
<li><a href="https://blog.csdn.net/mukes/article/details/115693833">Git 详细安装教程（详解 Git 安装过程的每一个步骤）_git安装_mukes的博客-CSDN博客</a></li>
</ul>
]]></content>
      <categories>
        <category>笔记</category>
      </categories>
      <tags>
        <tag>Git</tag>
      </tags>
  </entry>
  <entry>
    <title>windows 常用运行环境的安装</title>
    <url>/2023/10/17/%E5%B8%B8%E7%94%A8%E8%BF%90%E8%A1%8C%E7%8E%AF%E5%A2%83%E7%9A%84%E5%AE%89%E8%A3%85/</url>
    <content><![CDATA[<h1>一、Node.Js</h1>
<blockquote>
<p>去官网下载最新的稳定版 <a href="https://nodejs.org/en/">Node.JS</a> ，一般推荐 64 位（大家应该现在用的电脑基本都是 64 位的吧），安装的话很简单，基本就是下一步下一步点击就好了。</p>
</blockquote>
<h2 id="下载安装包">下载安装包</h2>
<p>要安装 <code>Node.js</code>，首先需要去下载对应系统安装包：</p>
<blockquote>
<p>根据自己电脑系统及位数选择，我的电脑是 Windows 系统、64位、想下载稳定版的.msi（LTS 为长期稳定版）这里选择 <code>windows64位.msi</code> 格式安装包。</p>
</blockquote>
<blockquote>
<p><code>.msi</code> 和 <code>.zip</code> 格式区别：</p>
<ul>
<li><code>.msi</code> 是 Windows installer 开发出来的程序安装文件，它可以让你安装，修改，卸载你所安装的程序。说白了.msi 就是 Windows installer 的数据包，把所有和安装文件相关的内容封装在一个包里。<strong>此外：它还包含有关安装过程自己的信息。例如：安装序列、目标文件夹路径、安装选项和控制安装过程的属性。</strong></li>
<li><code>.zip</code> 是一个压缩包，解压之后即可，不需要安装</li>
</ul>
</blockquote>
<p><a href="https://nodejs.org/zh-cn/download/">点击下载 | Node.js</a></p>
<p><img src="https://s2.loli.net/2023/10/17/aYusGDpvOCVkI2F.png" alt="nodejs1"></p>
<h2 id="安装程序">安装程序</h2>
<ol>
<li>
<p>下载完成后，双击安装包，开始安装，使用默认配置安装一直点 <code>next</code> 即可，安装路径默认在 <code>C:\Program Files</code> 下，也可以自定义修改，我这里安装在 <code>E:\Nodejs </code></p>
</li>
<li>
<p>下图根据本身的需要进行，我选择了默认 <code>Node.js runtime</code></p>
</li>
</ol>
<ul>
<li><code>Node.js runtime</code> ：表示运行环境</li>
<li><code>npm package manager</code>：表示npm包管理器</li>
<li><code>online documentation shortcuts</code> ：在线文档快捷方式</li>
<li><code>Add to PATH</code>：添加到环境变量</li>
</ul>
<p><img src="https://s2.loli.net/2023/10/17/kTJStsQueWfzVG5.png" alt="nodejs2"></p>
<ol start="3">
<li>下图框中所示，不用选</li>
</ol>
<p><img src="https://s2.loli.net/2023/10/17/drwnmSALf5VpaT6.png" alt="nodejs3"></p>
<ol start="4">
<li>点击 Install，完成安装</li>
<li>安装完成后，.msi 格式的安装包已经将 node 启动程序添加到系统环境变量 path 中,我们能够查看系统变量进行验证：在【个人电脑】右键→【属性】→【高级系统设置】，在系统变量中查看【path】。</li>
</ol>
<h2 id="修改位置">修改位置</h2>
<ol>
<li><strong>修改全局模块路径和缓存路径（可选）</strong></li>
</ol>
<blockquote>
<p>当我们在执行 npm install express -g 命令时，g 表示 global 全局。会默认下载到 c 盘，c 盘一般作为系统盘，尽量把一些程序安装到其他盘，来减少 c 盘空间的占用，它的默认路径为：<code>C:\Users\用户名\AppData\Roaming\npm</code>。</p>
<p><strong>注意：此文件夹默认是隐藏的，需要设置显示隐藏的文件夹。</strong></p>
</blockquote>
<p>①若希望将<strong>全模块所在路径</strong>和<strong>缓存路径</strong>放在自己的 node.js 安装的文件夹中，则在安装的文件夹 <code>E:\Nodejs </code> 下创建两个文件夹 <code>node_global</code> 和 <code>node_cache</code>，在 <code>node_global</code> 文件夹下再建一个 <code>node_modules </code> 文件夹<br>
②win+R 打开运行窗口，输入 cmd，再输入以下两条指令</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm config set prefix &quot;创建的node_global文件夹所在路径&quot; </span><br><span class="line">npm config set cache &quot;创建的node_cache文件夹所在路径&quot;</span><br></pre></td></tr></table></figure>
<p>比如：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm config set prefix &quot;E:\Nodejs\node_global&quot;  </span><br><span class="line">npm config set cache &quot;E:\Nodejs\node_cache&quot;</span><br></pre></td></tr></table></figure>
<ol start="2">
<li><strong>修改系统环境变量</strong></li>
</ol>
<p>①将【用户变量】下的 <code>Path </code> 变量中的默认的 npm 路径修改为新建的 node_global 路径，即修改为 <code>E:\Nodejs\node_global</code>，之后点击确定。<br>
② 在【系统变量】下新建 <code>NODE_PATH</code> 为 <code>E:\Nodejs\node_global\node_modules</code><br>
③ 在【系统变量】下的 <code>Path </code> 新建添加 node 全局文件夹 <code>E:\Nodejs\node_global </code></p>
<ol start="3">
<li><strong>验证</strong></li>
</ol>
<p>①经过上面的步骤，<strong>nodejs</strong> 下载的模块就会自动下载到我们自定义的目录<br>
输入下面的命令：</p>
<p><code>npm install express -g</code>      # -g 是全局安装的意思，不加 -g 就是默认下载到当前目录</p>
<p>②下载成功后，我们回到自定义的目录查看。</p>
<p>如果可以看到，下载的 express 模块即一个名叫 express 的文件夹全局的指定目录。即完成</p>
<blockquote>
<p><strong>注：若执行命令 <code>npm install express -g </code> 出现报错，由于权限的原因，可以以管理员身份运行 cmd</strong></p>
</blockquote>
<h2 id="更换国内源">更换国内源</h2>
<h3 id="更换-npm-源为淘宝镜像">更换 npm 源为淘宝镜像</h3>
<blockquote>
<p>npm 默认的  registry ,也就是下载 npm 包时是从国外的服务器下载，国内很慢，一般都会指向淘宝 <a href="https://registry.npm.taobao.org">https://registry.npm.taobao.org</a></p>
</blockquote>
<ol>
<li>查看初始 npm 源</li>
</ol>
<p><code>npm config get registry </code></p>
<ol start="2">
<li>更换镜像为淘宝镜像</li>
</ol>
<p><code>npm config set registry https://registry.npm.taobao.org/</code></p>
<h3 id="全局安装基于淘宝源的-cnpm（可使用上面那个）">全局安装基于淘宝源的 cnpm（可使用上面那个）</h3>
<blockquote>
<p>由于 npm 的服务器在海外，所以访问速度比较慢，访问不稳定，cnpm 的服务器是由淘宝团队提供服务器在国内 cnpm 是 npm 镜像，一般会同步更新，相差在10分钟，所以 cnpm 在安装一些软件时候会比较有优势。但是一般 cnpm 只用于安装时候，所以在项目创建与卸载等相关操作时候我们还是使用 npm。</p>
</blockquote>
<ol>
<li>全局安装基于淘宝源的 cnpm</li>
</ol>
<p><code>npm install -g cnpm --registry= https://registry.npm.taobao.org</code></p>
<p>下载完后，我们在本地就能看到 cnpm 模块, 在 node_modules 文件夹会出现一个名叫 cnpm 的文件夹</p>
<ol start="2">
<li>执行命令查看 cnpm 是否安装成功</li>
</ol>
<p><code>cnpm -v </code></p>
<h3 id="验证安装">验证安装</h3>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#进入命令提示符窗口，分别输入以下命令，显示版本号，则安装成功</span><br><span class="line">node -v       显示安装的nodejs版本  </span><br><span class="line">npm -v        显示安装的npm版本</span><br></pre></td></tr></table></figure>
<p><strong>参考文档</strong></p>
<ul>
<li><a href="https://blog.csdn.net/qq_52855464/article/details/127600132">Nodejs安装教程（全套教程保姆级）_nodejs 14.16_潮汐未见潮落的博客-CSDN博客</a></li>
</ul>
<hr>
<h1>二、PHP（待补充）</h1>
]]></content>
      <categories>
        <category>笔记</category>
      </categories>
      <tags>
        <tag>环境</tag>
      </tags>
  </entry>
  <entry>
    <title>搭建免费博客：Hexo+butterfly</title>
    <url>/2023/10/17/%E6%90%AD%E5%BB%BA%E5%85%8D%E8%B4%B9%E5%8D%9A%E5%AE%A2%EF%BC%9AHexo-butterfly/</url>
    <content><![CDATA[<div class="note orange icon-padding modern"><i class="note-icon fas fa-bullhorn"></i><p>简单记录一下我博客的安装和美化，本教程仅为个人备忘录</p>
</div>
<div class="note blue icon-padding modern"><i class="note-icon fas fa-bullhorn"></i><p>开始前先看官方文档（最起码过一遍）<br>
官方文档：<a href="https://butterfly.js.org/">Butterfly - A Simple and Card UI Design theme for Hexo</a></p>
</div>
<h1>一、环境搭建</h1>
<h2 id="安装-Git：">安装 Git：</h2>
<p><a href="https://fkcc.me/2023/10/17/%E5%AE%89%E8%A3%85Git/">windows 安装Git | ZのBlog (fkcc.me)</a></p>
<h2 id="安装-node-js">安装 node.js</h2>
<p><a href="https://fkcc.me/2023/10/17/%E5%B8%B8%E7%94%A8%E8%BF%90%E8%A1%8C%E7%8E%AF%E5%A2%83%E7%9A%84%E5%AE%89%E8%A3%85/">windows 常用运行环境的安装 | Z の Blog (fkcc.me)</a></p>
<h2 id="安装-Hexo">安装 Hexo</h2>
<ol>
<li>安装Hexo</li>
</ol>
<p>首先新建一个文件夹为 Hexo <strong>安装文件夹</strong>，例如：<code>E:\Blog\Hexo-Blog</code></p>
<blockquote>
<p>在 Git Bash 中使用 <code>cd</code> 命令进入文件夹：<br>
需使用 cd E:/Blog/Hexo-Blog 或者 cd /e/Blog/Hexo-Blog</p>
</blockquote>
<ul>
<li>全局安装：<code>npm install -g hexo-cli </code></li>
<li>仅局部安装 <code>hexo</code> ：<code>npm install hexo</code>        <strong># 本教程采用局部安装</strong></li>
<li>安装hexo服务器模块：<code>npm install hexo-server --save</code></li>
</ul>
<details class="toggle" ><summary class="toggle-button" style="">点击此处展开/收起内容，来自 chatgpt 的解释</summary><div class="toggle-content"><p>全局安装和局部安装都有各自的用途和优势，选择使用哪种安装方式取决于您的具体需求。<br>
一、全局安装的优势：</p>
<ol>
<li>全局安装的软件包可以在系统的任何位置使用，而不仅限于特定的项目目录。</li>
<li>全局安装的软件包可以通过命令行直接调用，无需指定完整的路径。</li>
<li>全局安装的软件包可以在多个项目中共享，避免了重复安装和占用磁盘空间。</li>
</ol>
<p>局部安装的优势：</p>
<ol>
<li>局部安装将软件包安装在特定的项目目录中，使得每个项目都可以独立管理自己的依赖项。</li>
<li>局部安装的软件包版本可以与每个项目的要求相匹配，避免了不同项目之间的冲突。</li>
<li>局部安装可以使得项目更加可移植和可复制，其他用户或开发者可以通过简单的安装依赖来复现您的项目环境。</li>
</ol>
<p>二、综合考虑，一般建议在以下情况下使用全局安装：</p>
<ul>
<li>安装命令行工具，如 Hexo CLI、Vue CLI、Angular CLI 等，这些工具通常需要在全局范围内使用。</li>
<li>安装全局的开发工具，如 TypeScript、ESLint 等，这些工具在多个项目中都可以使用。</li>
</ul>
<p>而在以下情况下使用局部安装更为合适：</p>
<ul>
<li>安装项目特定的依赖项，这样可以确保每个项目都有独立的依赖环境。</li>
<li>在不同的项目中使用不同版本的软件包，以满足不同项目的特定需求。</li>
<li>分发和共享项目时，可以通过将依赖项包含在项目中，使得其他用户或开发者可以轻松地复现项目环境。</li>
</ul>
</div></details>
<blockquote>
<p>特别注意：<br>
局部安装需要将 Hexo 所在的目录下的 <code>node_modules中的.bin</code> 添加到环境变量 PATH 之中</p>
</blockquote>
<ol start="2">
<li>在<strong>安装文件夹</strong>（E:\Blog\Hexo-Blog）下新建一个文件夹为博客文件夹 blog，并初始化博客</li>
</ol>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">hexo init blog     //初始化项目</span><br><span class="line">cd blog            //进入项目文件夹</span><br><span class="line">npm install        //安装相关依赖</span><br></pre></td></tr></table></figure>
<blockquote>
<p>执行完成后我们打开 blog 文件夹：<br>
scaffolds 是模板文件夹，创建新文章或者新页面时，Hexo 会根据此文件夹建立文件；<br>
source 是资源文件夹；<br>
themes是主题文件夹，Hexo会根据此文件夹生成静态页面</p>
</blockquote>
<p>初始化后，目录结构如下：</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">.</span><br><span class="line">├── _config.yml      # 博客配置信息</span><br><span class="line">├── package.json     # 项目名称、描述、版本、运行和开发等信息</span><br><span class="line">├── scaffolds        # 生成文章的一些模板</span><br><span class="line">├── source           # 存放用户资源</span><br><span class="line">|   ├── _drafts</span><br><span class="line">    └── _posts</span><br><span class="line">├── node_modules     # 依赖包</span><br><span class="line">└── themes           # 主题文件夹</span><br></pre></td></tr></table></figure>
<h2 id="将静态博客挂载到-GitHub">将静态博客挂载到 GitHub</h2>
<ol>
<li>安装 hexo-deployer-git</li>
</ol>
<p><code>npm install hexo-deployer-git --save</code></p>
<ol start="2">
<li>修改 _config.yml 文件</li>
</ol>
<p>在 blog 目录下的_config.yml，就是整个 Hexo 框架的配置文件了。可以在里面修改大部分的配置。详细可参考官方的 <a href="https://hexo.io/zh-cn/docs/configuration">配置描述</a>。<br>
修改最后一行的配置，将 repository 修改为你自己的 github 项目地址即可。</p>
<blockquote>
<p>请检查自己的默认分支是不是 main</p>
</blockquote>
<ol start="3">
<li>部署项目到 GitHub</li>
</ol>
<p>修改好配置后，运行如下命令，将代码部署到 GitHub</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo clean</span><br><span class="line">hexo generate</span><br><span class="line">hexo deploy</span><br></pre></td></tr></table></figure>
<ul>
<li>Hexo clean：删除之前生成的文件，若未生成过静态文件，可忽略此命令。</li>
<li>Hexo generate：生成静态文章，可以用 hexo g 缩写</li>
<li>Hexo deploy：部署文章，可以用 hexo d 缩写</li>
</ul>
<blockquote>
<p>注意：deploy 时可能要输入 username 和 password</p>
</blockquote>
<p>如果出现 Deploy done，则说明部署成功了。</p>
<hr>
<h2 id="安装-Butterfly-主题">安装 Butterfly 主题</h2>
<p><a href="https://butterfly.js.org/posts/21cfbf15/#%E5%AE%89%E8%A3%9D">Butterfly 安裝文檔(一) 快速開始 | Butterfly</a></p>
<ol>
<li>本人用的是 git clone 方式安装的 hexo-theme-butterfly</li>
</ol>
<p>在你的博客根目录里（本教程路径为【E:/Blog/Hexo-Blog/blog】），打开 Git 工具，执行命令即可。</p>
<ul>
<li>稳定版【建议】</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git clone -b master https://github.com/jerryc127/hexo-theme-butterfly.git themes/butterfly</span><br></pre></td></tr></table></figure>
<ul>
<li>测试版</li>
</ul>
<blockquote>
<p>测试版可能存在 bug，追求稳定的请安装稳定版</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git clone -b dev https://github.com/jerryc127/hexo-theme-butterfly.git themes/butterfly</span><br></pre></td></tr></table></figure>
<ul>
<li>升级方法：在主题目录下，运行 git pull</li>
</ul>
<blockquote>
<p>注意：如果自己魔改了，谨慎升级</p>
</blockquote>
<ol start="2">
<li>应用主题</li>
</ol>
<p>修改 Hexo 根目录下的 _config.yml，把主题改为 butterfly</p>
<p><code>theme: butterfly</code></p>
<ol start="3">
<li>安装插件</li>
</ol>
<p>如果你没有 pug 以及 stylus 的渲染器，请下载安装：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install hexo-renderer-pug hexo-renderer-stylus --save</span><br></pre></td></tr></table></figure>
<ol start="4">
<li>升级建议</li>
</ol>
<p>为了减少升级主题后带来的不便，请使用以下方法（建议，也可以不做）<br>
在 hexo 的根目录创建一个文件· <code>_config.butterfly.yml</code>，并把主题目录的 <code>_config.yml</code> 内容复制到 <code> _config.butterfly.yml</code> 去。( 注意: 复制的是主题的 <code>_config.yml</code> ，而不是 hexo 的 <code>_config.yml</code>)</p>
<blockquote>
<p>注意：不要把主题目录的 <code>_config.yml</code> 删掉</p>
</blockquote>
<blockquote>
<p>注意： 以后只需要在 <code>_config. Butterfly.yml</code> 进行配置就行。<br>
如果使用了 <code>_config. Butterfly.yml</code>，配置主题的 <code>_config.yml</code> 将不会有效果。</p>
</blockquote>
<p>Hexo 会自动合并主题中的 <code> _config.yml</code> 和 <code> _config.butterfly.yml</code> 里的配置，如果存在同名配置，会使用 <code>_config.butterfly.yml</code> 的配置，其优先度较高。</p>
<h2 id="美化">美化</h2>
<ol>
<li>首先先按照官方文档进行一些基础设置和美化</li>
</ol>
<p><a href="https://butterfly.js.org/">Butterfly - A Simple and Card UI Design theme for Hexo</a></p>
<blockquote>
<p>官方文档中都有，按照顺序搞一遍进行了</p>
</blockquote>
<ol start="2">
<li>更多美化和魔改</li>
</ol>
<p>其实按照官方文档设置后差不多就可以了，想要更加花里胡哨的话，可以在此基础上添加其他的美化和魔改</p>
<ul>
<li>
<p>我添加的美化和魔改：<a href="https://fkcc.me/2023/09/15/Butterfly-%E4%B8%80%E4%BA%9B%E9%AD%94%E6%94%B9%E7%BE%8E%E5%8C%96/">Butterfly 一些魔改美化 | Z の Blog (fkcc.me)</a></p>
</li>
<li>
<p>我参考的：</p>
</li>
</ul>
<details class="toggle" ><summary class="toggle-button" style="">点击查看更多</summary><div class="toggle-content"><ol>
<li>参考比较多的</li>
</ol>
<ul>
<li><a href="https://fe32.top/articles/hexo1606/#%E4%BE%A7%E8%BE%B9%E6%A0%8F%E5%85%AC%E4%BC%97%E5%8F%B7">基于 Hexo 从零开始搭建个人博客（六） | 唐志远の博客</a></li>
</ul>
<ol start="2">
<li>其他</li>
</ol>
<ul>
<li>
<p><a href="https://akilar.top/">Akilarの糖果屋 - Akilar.top</a></p>
</li>
<li>
<p><a href="https://yisous.xyz/">Ariasakaの小窝</a></p>
</li>
<li>
<p><a href="https://9527zxl.github.io/2021/07/22/butterfly%E4%B8%BB%E9%A2%98%E9%AD%94%E6%94%B9%E6%A0%B7%E5%BC%8F/#%E9%A1%B5%E8%84%9A%E9%80%8F%E6%98%8E">butterfly主题魔改样式 | 从你的世界路过</a></p>
</li>
<li>
<p><a href="https://code7rain.github.io/2022/11/19/Hexo%E4%B8%BB%E9%A2%98Butterfly%E9%85%8D%E7%BD%AE%E3%80%81%E8%B8%A9%E5%9D%91%E5%8F%8A%E9%AD%94%E6%94%B9/">Hexo主题Butterfly配置、踩坑及魔改 | CodeRain</a></p>
</li>
<li>
<p><a href="https://qianchenggit.github.io/2021/10/19/%E8%87%AA%E5%AE%9A%E4%B9%89%E6%A0%B7%E5%BC%8F%E9%AD%94%E6%94%B9/">自定义样式魔改 | QianChengGit の小森林</a></p>
</li>
<li>
<p><a href="https://blog.csdn.net/howareyou2104/article/details/106361169">butterfly外挂插件增强(超全)_butterfly插件_会飞的小弋的博客-CSDN博客</a></p>
</li>
<li>
<p><a href="https://blog.csdn.net/howareyou2104/article/details/106393184">手把手教你修改butterfly主题的样式_butrerfly主题background更换_会飞的小弋的博客-CSDN博客</a></p>
</li>
<li>
<p><a href="https://lovelijunyi.gitee.io/posts/c898.html">小弋の生活馆全样式预览 | 小弋の生活馆</a></p>
</li>
<li>
<p><a href="https://hr-insist.github.io/Hexo/%E5%85%B3%E4%BA%8E%E6%88%91%E7%9A%84Butterfly%E4%B8%BB%E9%A2%98%E7%9A%84%E6%89%80%E6%9C%89%E4%BC%98%E5%8C%96/">关于我的Butterfly主题的所有优化 | Modesty</a></p>
</li>
<li>
<p><a href="https://blog.csdn.net/csdn__cpp/article/details/110007453">在butterfly主题下如何配置加强版看板娘？-CSDN博客</a></p>
</li>
</ul>
</div></details>
<h2 id="参考">参考</h2>
<p><a href="https://juejin.cn/post/6844904122353713165">使用 Hexo + GitHub + Netlify + Cloudflare 搭建个人博客 - 掘金</a></p>
]]></content>
  </entry>
</search>
